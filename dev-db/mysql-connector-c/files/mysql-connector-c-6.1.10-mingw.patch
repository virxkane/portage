diff -urBb mysql-connector-c-6.1.10-src-orig/configure.cmake mysql-connector-c-6.1.10-src/configure.cmake
--- mysql-connector-c-6.1.10-src-orig/configure.cmake	2017-04-21 17:52:33.000000000 +0400
+++ mysql-connector-c-6.1.10-src/configure.cmake	2017-05-14 00:05:10.360845800 +0400
@@ -739,6 +747,7 @@
 }" HAVE_BUILTIN_EXPECT)
 
 # GCC has __builtin_stpcpy but still calls stpcpy
+IF(NOT WIN32)
 IF(NOT CMAKE_SYSTEM_NAME MATCHES "SunOS" OR NOT CMAKE_COMPILER_IS_GNUCC)
 CHECK_C_SOURCE_COMPILES("
 int main()
@@ -749,6 +758,7 @@
   return 0;
 }" HAVE_BUILTIN_STPCPY)
 ENDIF()
+ENDIF()
 
 CHECK_CXX_SOURCE_COMPILES("
   int main()
diff -urBb mysql-connector-c-6.1.10-src-orig/include/m_string.h mysql-connector-c-6.1.10-src/include/m_string.h
--- mysql-connector-c-6.1.10-src-orig/include/m_string.h	2017-04-21 17:52:33.000000000 +0400
+++ mysql-connector-c-6.1.10-src/include/m_string.h	2017-05-14 00:03:06.207801000 +0400
@@ -129,7 +129,7 @@
 
 static inline char *my_strtok_r(char *str, const char *delim, char **saveptr)
 {
-#if defined _WIN32
+#if defined(_WIN32) && !defined(__MINGW32__)
   return strtok_s(str, delim, saveptr);
 #else
   return strtok_r(str, delim, saveptr);
diff -urBb mysql-connector-c-6.1.10-src-orig/include/my_dir.h mysql-connector-c-6.1.10-src/include/my_dir.h
--- mysql-connector-c-6.1.10-src-orig/include/my_dir.h	2017-04-21 17:52:33.000000000 +0400
+++ mysql-connector-c-6.1.10-src/include/my_dir.h	2017-05-14 00:03:06.209754300 +0400
@@ -27,7 +27,9 @@
 	/* Defines for my_dir and my_stat */
 
 #ifdef _WIN32
+#ifndef S_IROTH
 #define S_IROTH _S_IREAD
+#endif
 #define S_IFIFO _S_IFIFO
 #endif
 
diff -urBb mysql-connector-c-6.1.10-src-orig/include/my_global.h mysql-connector-c-6.1.10-src/include/my_global.h
--- mysql-connector-c-6.1.10-src-orig/include/my_global.h	2017-04-21 17:52:33.000000000 +0400
+++ mysql-connector-c-6.1.10-src/include/my_global.h	2017-05-14 23:53:15.514901200 +0400
@@ -115,10 +115,12 @@
 #undef SIZEOF_OFF_T
 #define SIZEOF_OFF_T 8
 
+#ifndef HAVE_SLEEP
 static inline void sleep(unsigned long seconds)
 {
   Sleep(seconds * 1000);
 }
+#endif
 
 /* Define missing access() modes. */
 #define F_OK 0
@@ -217,8 +219,12 @@
 #ifdef _WIN32
 typedef int       socket_len_t;
 typedef int       sigset_t;
+#ifndef _MODE_T_
 typedef int       mode_t;
+#endif
+#ifndef _SSIZE_T_DEFINED
 typedef SSIZE_T   ssize_t;
+#endif
 #else
 typedef socklen_t socket_len_t;
 #endif
@@ -459,7 +465,7 @@
 
 #define NullS		(char *) 0
 
-#ifdef _WIN32
+#if defined(_WIN32) && defined(_MSC_VER)
 #define STDCALL __stdcall
 #else
 #define STDCALL
@@ -672,12 +678,14 @@
   FILETIME ft;
   __int64 i64;
  };
-
+// In mingw-w64 struct timespec already defined in <sys/timeb.h> which included in <time.h>
+#ifndef _TIMESPEC_DEFINED
 struct timespec {
   union ft64 tv;
   /* The max timeout value in millisecond for native_cond_timedwait */
   long max_timeout_msec;
 };
+#endif
 
 #endif /* !HAVE_STRUCT_TIMESPEC */
 
diff -urBb mysql-connector-c-6.1.10-src-orig/include/mysql.h mysql-connector-c-6.1.10-src/include/mysql.h
--- mysql-connector-c-6.1.10-src-orig/include/mysql.h	2017-04-21 17:52:33.000000000 +0400
+++ mysql-connector-c-6.1.10-src/include/mysql.h	2017-05-14 00:03:06.217567400 +0400
@@ -35,7 +35,7 @@
 #include <sys/types.h>
 #endif
 typedef char my_bool;
-#if !defined(_WIN32)
+#if !defined(_WIN32) || !defined(_MSC_VER)
 #define STDCALL
 #else
 #define STDCALL __stdcall
diff -urBb mysql-connector-c-6.1.10-src-orig/libmysql/authentication_win/handshake.h mysql-connector-c-6.1.10-src/libmysql/authentication_win/handshake.h
--- mysql-connector-c-6.1.10-src-orig/libmysql/authentication_win/handshake.h	2017-04-21 17:52:33.000000000 +0400
+++ mysql-connector-c-6.1.10-src/libmysql/authentication_win/handshake.h	2017-05-14 00:03:06.220497200 +0400
@@ -100,7 +100,7 @@
   Handshake(const char *ssp, side_t side);
   virtual ~Handshake();
 
-  int Handshake::packet_processing_loop();
+  int packet_processing_loop();
 
   bool virtual is_complete() const
   {
diff -urBb mysql-connector-c-6.1.10-src-orig/mysys/my_gethwaddr.c mysql-connector-c-6.1.10-src/mysys/my_gethwaddr.c
--- mysql-connector-c-6.1.10-src-orig/mysys/my_gethwaddr.c	2017-04-21 17:52:33.000000000 +0400
+++ mysql-connector-c-6.1.10-src/mysys/my_gethwaddr.c	2017-05-14 00:03:06.223427400 +0400
@@ -138,6 +138,7 @@
 #define VOID void
 #endif
 
+#include <wincrypt.h>
 #include <iphlpapi.h>
 
 /*
diff -urBb mysql-connector-c-6.1.10-src-orig/mysys/my_thr_init.c mysql-connector-c-6.1.10-src/mysys/my_thr_init.c
--- mysql-connector-c-6.1.10-src-orig/mysys/my_thr_init.c	2017-04-21 17:52:33.000000000 +0400
+++ mysql-connector-c-6.1.10-src/mysys/my_thr_init.c	2017-05-15 00:34:12.869208900 +0400
@@ -53,8 +53,10 @@
 native_mutexattr_t my_errorcheck_mutexattr;
 #endif
 #ifdef _WIN32
+#ifdef _MSC_VER
 static void install_sigabrt_handler();
 #endif
+#endif
 
 #ifndef DBUG_OFF
 struct st_my_thread_var
@@ -299,8 +301,10 @@
     return TRUE; /* cannot proceed with unintialized library */
 
 #ifdef _WIN32
+#ifdef _MSC_VER
   install_sigabrt_handler();
 #endif
+#endif
 
 #ifndef DBUG_OFF
   if (mysys_thread_var())
@@ -436,6 +440,7 @@
 
 
 #ifdef _WIN32
+#ifdef _MSC_VER
 /*
   In Visual Studio 2005 and later, default SIGABRT handler will overwrite
   any unhandled exception filter set by the application  and will try to
@@ -456,4 +461,5 @@
   signal(SIGABRT,my_sigabrt_handler);
 }
 #endif
+#endif
 
diff -urBb mysql-connector-c-6.1.10-src-orig/mysys/stacktrace.c mysql-connector-c-6.1.10-src/mysys/stacktrace.c
--- mysql-connector-c-6.1.10-src-orig/mysys/stacktrace.c	2017-04-21 17:52:33.000000000 +0400
+++ mysql-connector-c-6.1.10-src/mysys/stacktrace.c	2017-05-14 00:03:06.226356000 +0400
@@ -549,15 +549,8 @@
 
 void my_safe_puts_stderr(const char *val, size_t len)
 {
-  __try
-  {
-    my_write_stderr(val, len);
-    my_safe_printf_stderr("%s", "\n");
-  }
-  __except(EXCEPTION_EXECUTE_HANDLER)
-  {
+  if (!my_write_stderr(val, len)) 
     my_safe_printf_stderr("%s", "is an invalid string pointer\n");
-  }
 }
 #endif /* _WIN32 */
 
@@ -566,9 +559,16 @@
 size_t my_write_stderr(const void *buf, size_t count)
 {
   DWORD bytes_written;
-  SetFilePointer(GetStdHandle(STD_ERROR_HANDLE), 0, NULL, FILE_END);
-  WriteFile(GetStdHandle(STD_ERROR_HANDLE), buf, (DWORD)count, &bytes_written, NULL);
-  return bytes_written;
+  HANDLE hnd = GetStdHandle(STD_ERROR_HANDLE);
+  if (NULL != hnd)
+  {
+	if (INVALID_SET_FILE_POINTER != SetFilePointer(hnd, 0, NULL, FILE_END))
+	{
+		if (WriteFile(hnd, buf, count, &bytes_written, NULL))
+			return (size_t)bytes_written;
+	}
+  }
+  return 0; 
 }
 #else
 size_t my_write_stderr(const void *buf, size_t count)
diff -urBb mysql-connector-c-6.1.10-src-orig/sql-common/client_authentication.cc mysql-connector-c-6.1.10-src/sql-common/client_authentication.cc
--- mysql-connector-c-6.1.10-src-orig/sql-common/client_authentication.cc	2017-04-21 17:52:33.000000000 +0400
+++ mysql-connector-c-6.1.10-src/sql-common/client_authentication.cc	2017-05-15 00:37:14.239324500 +0400
@@ -83,7 +83,7 @@
 
   if (mysql->options.extension != NULL &&
       mysql->options.extension->server_public_key_path != NULL &&
-      mysql->options.extension->server_public_key_path != '\0')
+      *mysql->options.extension->server_public_key_path != '\0')
   {
     pub_key_file= fopen(mysql->options.extension->server_public_key_path,
                         "r");

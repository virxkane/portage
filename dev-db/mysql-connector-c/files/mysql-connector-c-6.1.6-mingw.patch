diff -urBb mysql-connector-c-6.1.6-src-orig/configure.cmake mysql-connector-c-6.1.6-src/configure.cmake
--- mysql-connector-c-6.1.6-src-orig/configure.cmake	2015-02-26 00:09:49.000000000 +0300
+++ mysql-connector-c-6.1.6-src/configure.cmake	2015-07-14 16:49:48.301791900 +0300
@@ -695,6 +703,7 @@
 }" HAVE_BUILTIN_EXPECT)
 
 # GCC has __builtin_stpcpy but still calls stpcpy
+IF(NOT WIN32)
 IF(NOT CMAKE_SYSTEM_NAME MATCHES "SunOS" OR NOT CMAKE_COMPILER_IS_GNUCC)
 CHECK_C_SOURCE_COMPILES("
 int main()
@@ -705,6 +714,7 @@
   return 0;
 }" HAVE_BUILTIN_STPCPY)
 ENDIF()
+ENDIF()
 
 CHECK_CXX_SOURCE_COMPILES("
   int main()
diff -urBb mysql-connector-c-6.1.6-src-orig/include/m_string.h mysql-connector-c-6.1.6-src/include/m_string.h
--- mysql-connector-c-6.1.6-src-orig/include/m_string.h	2015-02-26 00:09:49.000000000 +0300
+++ mysql-connector-c-6.1.6-src/include/m_string.h	2015-07-12 12:08:08.724565000 +0300
@@ -127,7 +127,7 @@
 
 static inline char *my_strtok_r(char *str, const char *delim, char **saveptr)
 {
-#if defined _WIN32
+#if defined(_WIN32) && !defined(__MINGW32__)
   return strtok_s(str, delim, saveptr);
 #else
   return strtok_r(str, delim, saveptr);
diff -urBb mysql-connector-c-6.1.6-src-orig/include/my_dir.h mysql-connector-c-6.1.6-src/include/my_dir.h
--- mysql-connector-c-6.1.6-src-orig/include/my_dir.h	2015-02-26 00:09:49.000000000 +0300
+++ mysql-connector-c-6.1.6-src/include/my_dir.h	2015-07-14 14:48:32.893662400 +0300
@@ -27,7 +27,9 @@
 	/* Defines for my_dir and my_stat */
 
 #ifdef _WIN32
+#ifndef S_IROTH
 #define S_IROTH _S_IREAD
+#endif
 #define S_IFIFO _S_IFIFO
 #endif
 
diff -urBb mysql-connector-c-6.1.6-src-orig/include/my_global.h mysql-connector-c-6.1.6-src/include/my_global.h
--- mysql-connector-c-6.1.6-src-orig/include/my_global.h	2015-02-26 00:09:49.000000000 +0300
+++ mysql-connector-c-6.1.6-src/include/my_global.h	2015-07-14 17:28:21.637107100 +0300
@@ -208,8 +208,12 @@
 #ifdef _WIN32
 typedef int       socket_len_t;
 typedef int       sigset_t;
+#ifndef _MODE_T_
 typedef int       mode_t;
+#endif
+#ifndef _SSIZE_T_DEFINED
 typedef SSIZE_T   ssize_t;
+#endif
 #else
 typedef socklen_t socket_len_t;
 #endif
@@ -444,7 +448,7 @@
 
 #define NullS		(char *) 0
 
-#ifdef _WIN32
+#if defined(_WIN32) && defined(_MSC_VER)
 #define STDCALL __stdcall
 #else
 #define STDCALL
@@ -656,12 +660,14 @@
   FILETIME ft;
   __int64 i64;
  };
-
+// In mingw-w64 struct timespec already defined in <sys/timeb.h> which included in <time.h>
+#ifndef _TIMESPEC_DEFINED
 struct timespec {
   union ft64 tv;
   /* The max timeout value in millisecond for native_cond_timedwait */
   long max_timeout_msec;
 };
+#endif
 
 #endif /* _WIN32 */
 
@@ -671,7 +677,7 @@
 
 static inline void set_timespec_nsec(struct timespec *abstime, ulonglong nsec)
 {
-#ifndef _WIN32
+#if !defined(_WIN32) || defined(_TIMESPEC_DEFINED)
   ulonglong now= my_getsystime() + (nsec / 100);
   abstime->tv_sec=   now / 10000000ULL;
   abstime->tv_nsec= (now % 10000000ULL) * 100 + (nsec % 100);
@@ -697,7 +703,7 @@
 */
 static inline int cmp_timespec(struct timespec *ts1, struct timespec *ts2)
 {
-#ifndef _WIN32
+#if !defined(_WIN32) || defined(_TIMESPEC_DEFINED)
   if (ts1->tv_sec > ts2->tv_sec ||
       (ts1->tv_sec == ts2->tv_sec && ts1->tv_nsec > ts2->tv_nsec))
     return 1;
@@ -715,7 +721,7 @@
 
 static inline ulonglong diff_timespec(struct timespec *ts1, struct timespec *ts2)
 {
-#ifndef _WIN32
+#if !defined(_WIN32) || defined(_TIMESPEC_DEFINED)
   return (ts1->tv_sec - ts2->tv_sec) * 1000000000ULL +
     ts1->tv_nsec - ts2->tv_nsec;
 #else
diff -urBb mysql-connector-c-6.1.6-src-orig/include/mysql.h mysql-connector-c-6.1.6-src/include/mysql.h
--- mysql-connector-c-6.1.6-src-orig/include/mysql.h	2015-02-26 00:09:49.000000000 +0300
+++ mysql-connector-c-6.1.6-src/include/mysql.h	2015-07-12 12:08:08.730565400 +0300
@@ -35,7 +35,7 @@
 #include <sys/types.h>
 #endif
 typedef char my_bool;
-#if !defined(_WIN32)
+#if !defined(_WIN32) || !defined(_MSC_VER)
 #define STDCALL
 #else
 #define STDCALL __stdcall
diff -urBb mysql-connector-c-6.1.6-src-orig/libmysql/authentication_win/handshake.h mysql-connector-c-6.1.6-src/libmysql/authentication_win/handshake.h
--- mysql-connector-c-6.1.6-src-orig/libmysql/authentication_win/handshake.h	2015-02-26 00:09:49.000000000 +0300
+++ mysql-connector-c-6.1.6-src/libmysql/authentication_win/handshake.h	2015-07-12 12:08:08.732565500 +0300
@@ -100,7 +100,7 @@
   Handshake(const char *ssp, side_t side);
   virtual ~Handshake();
 
-  int Handshake::packet_processing_loop();
+  int packet_processing_loop();
 
   bool virtual is_complete() const
   {
diff -urBb mysql-connector-c-6.1.6-src-orig/mysys/my_gethwaddr.c mysql-connector-c-6.1.6-src/mysys/my_gethwaddr.c
--- mysql-connector-c-6.1.6-src-orig/mysys/my_gethwaddr.c	2015-02-26 00:09:49.000000000 +0300
+++ mysql-connector-c-6.1.6-src/mysys/my_gethwaddr.c	2015-07-14 14:46:14.978774100 +0300
@@ -137,6 +137,7 @@
 #define VOID void
 #endif
 
+#include <wincrypt.h>
 #include <iphlpapi.h>
 
 /*
diff -urBb mysql-connector-c-6.1.6-src-orig/mysys/stacktrace.c mysql-connector-c-6.1.6-src/mysys/stacktrace.c
--- mysql-connector-c-6.1.6-src-orig/mysys/stacktrace.c	2015-02-26 00:09:49.000000000 +0300
+++ mysql-connector-c-6.1.6-src/mysys/stacktrace.c	2015-07-12 12:08:08.735565700 +0300
@@ -549,15 +549,8 @@
 
 void my_safe_puts_stderr(const char *val, size_t len)
 {
-  __try
-  {
-    my_write_stderr(val, len);
-    my_safe_printf_stderr("%s", "\n");
-  }
-  __except(EXCEPTION_EXECUTE_HANDLER)
-  {
+  if (!my_write_stderr(val, len)) 
     my_safe_printf_stderr("%s", "is an invalid string pointer\n");
-  }
 }
 #endif /* _WIN32 */
 
@@ -566,9 +559,16 @@
 size_t my_write_stderr(const void *buf, size_t count)
 {
   DWORD bytes_written;
-  SetFilePointer(GetStdHandle(STD_ERROR_HANDLE), 0, NULL, FILE_END);
-  WriteFile(GetStdHandle(STD_ERROR_HANDLE), buf, (DWORD)count, &bytes_written, NULL);
-  return bytes_written;
+  HANDLE hnd = GetStdHandle(STD_ERROR_HANDLE);
+  if (NULL != hnd)
+  {
+	if (INVALID_SET_FILE_POINTER != SetFilePointer(hnd, 0, NULL, FILE_END))
+	{
+		if (WriteFile(hnd, buf, count, &bytes_written, NULL))
+			return (size_t)bytes_written;
+	}
+  }
+  return 0; 
 }
 #else
 size_t my_write_stderr(const void *buf, size_t count)

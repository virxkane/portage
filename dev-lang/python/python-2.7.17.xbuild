# Borrowed from project MINGW-packages (https://github.com/Alexpux/MINGW-packages)

DESCRIPTION="An interpreted, interactive, object-oriented programming language"

HOMEPAGE="http://www.python.org/"

LICENSE="PSF-2"

DEPEND="dev-util/pkg-config"
RDEPEND="dev-libs/libffi
		dev-libs/expat
		dev-db/sqlite
		dev-libs/openssl
		app-arch/libbz2
		sys-libs/zlib"

MY_P="Python-${PV}"
_pybasever=2.7

SRC_URI="http://www.python.org/ftp/python/${PV}/${MY_P}.tar.xz"

RESTRICT="strip"

SOURCES_DIR="${MY_P}"
BUILD_IN_SEPARATE_DIR=yes

# TODO: add pkg_postinst() to fix hardcoded install prefix!


src_prepare()
{
	# these are created by patches
	rm -f Misc/config_mingw \
		Misc/cross_mingw32 \
		Misc/python-config.sh.in \
		Misc/python-config-u.sh.in \
		Python/fileblocks.c \
		Lib/list2cmdline.py

	echo "Apply Ray Donnelly's relocatability enabling patch"
	epatch "0000-make-_sysconfigdata.py-relocatable.patch"
	epatch "0001-fix-_nt_quote_args-using-subprocess-list2cmdline.patch"

	echo "Apply Roumen Petrov's core patches (15)"
	epatch "0100-MINGW-BASE-use-NT-thread-model-2.7.17.patch"
	epatch "0110-MINGW-translate-gcc-internal-defines-to-python-platf.patch"
	epatch "0120-MINGW-use-header-in-lowercase.patch"
	epatch "0130-MINGW-configure-MACHDEP-and-platform-for-build.patch"
	epatch "0140-MINGW-preset-configure-defaults.patch"
	epatch "0150-MINGW-configure-largefile-support-for-windows-builds.patch"
	epatch "0160-MINGW-add-wincrypt.h-in-Python-random.c.patch"
	epatch "0180-MINGW-init-system-calls.patch"
	epatch "0190-MINGW-detect-REPARSE_DATA_BUFFER.patch"
	epatch "0200-MINGW-build-in-windows-modules-winreg.patch"
	epatch "0210-MINGW-determine-if-pwdmodule-should-be-used.patch"
	epatch "0220-MINGW-default-sys.path-calculations-for-windows-plat-2.7.17.patch"
	epatch "0230-MINGW-AC_LIBOBJ-replacement-of-fileblocks.patch"

	echo "Apply Roumen Petrov's compiler patch (2)"
	epatch "0250-MINGW-compiler-customize-mingw-cygwin-compilers.patch"

	echo "Apply Roumen Petrov's extensions patches (21)"
	epatch "0270-CYGWIN-issue13756-Python-make-fail-on-cygwin.patch"
	epatch "0290-issue6672-v2-Add-Mingw-recognition-to-pyport.h-to-al.patch"
	epatch "0300-MINGW-configure-for-shared-build.patch"
	epatch "0310-MINGW-dynamic-loading-support.patch"
	epatch "0320-MINGW-implement-exec-prefix.patch"
	epatch "0330-MINGW-ignore-main-program-for-frozen-scripts.patch"
	epatch "0340-MINGW-setup-exclude-termios-module.patch"
	epatch "0350-MINGW-setup-_multiprocessing-module.patch"
	epatch "0360-MINGW-setup-select-module.patch"
	epatch "0370-MINGW-setup-_ctypes-module-with-system-libffi.patch"
	epatch "0380-MINGW-defect-winsock2-and-setup-_socket-module.patch"
	epatch "0390-MINGW-exclude-unix-only-modules.patch"
	epatch "0400-MINGW-setup-msvcrt-module.patch"
	epatch "0410-MINGW-build-extensions-with-GCC.patch"
	epatch "0420-MINGW-use-Mingw32CCompiler-as-default-compiler-for-m.patch"
	epatch "0430-MINGW-find-import-library.patch"
	epatch "0440-MINGW-setup-_ssl-module.patch"
	epatch "0460-MINGW-generalization-of-posix-build-in-sysconfig.py.patch"
	epatch "0462-MINGW-support-stdcall-without-underscore.patch"
	epatch "0480-MINGW-generalization-of-posix-build-in-distutils-sys.patch"
	epatch "0490-MINGW-customize-site.patch"

	echo "Apply Ray Donnelly's general/cross patches (32)"
	epatch "0500-add-python-config-sh.patch"
	epatch "0510-cross-darwin-feature-2.7.15.patch"
	epatch "0520-py3k-mingw-ntthreads-vs-pthreads.patch"
	epatch "0530-mingw-system-libffi.patch"
	epatch "0540-mingw-semicolon-DELIM.patch"
	epatch "0550-mingw-regen-use-stddef_h.patch"
	epatch "0560-mingw-use-posix-getpath.patch"
	epatch "0565-mingw-add-ModuleFileName-dir-to-PATH.patch"
	epatch "0570-mingw-add-BUILDIN_WIN32_MODULEs-time-msvcrt.patch"
	epatch "0580-mingw32-test-REPARSE_DATA_BUFFER.patch"
	epatch "0590-mingw-INSTALL_SHARED-LDLIBRARY-LIBPL.patch"
	epatch "0600-msys-mingw-prefer-unix-sep-if-MSYSTEM.patch"
	epatch "0610-msys-cygwin-semi-native-build-sysconfig.patch"
	epatch "0620-mingw-sysconfig-like-posix.patch"
	epatch "0630-mingw-_winapi_as_builtin_for_Popen_in_cygwinccompiler.patch"
	epatch "0640-mingw-x86_64-size_t-format-specifier-pid_t.patch"
	epatch "0650-cross-dont-add-multiarch-paths-if-cross-compiling.patch"
	epatch "0660-mingw-use-backslashes-in-compileall-py.patch"
	epatch "0670-msys-convert_path-fix-and-root-hack.patch"
	epatch "0690-allow-static-tcltk.patch"
	epatch "0710-CROSS-properly-detect-WINDOW-_flags-for-different-nc-2.7.15.patch"
	epatch "0720-mingw-pdcurses_ISPAD.patch"
	epatch "0740-grammar-fixes.patch"
	epatch "0750-Add-interp-Python-DESTSHARED-to-PYTHONPATH-b4-pybuilddir-txt-dir.patch"
	epatch "0760-msys-monkeypatch-os-system-via-sh-exe.patch"
	epatch "0770-msys-replace-slashes-used-in-io-redirection.patch"
	epatch "0790-mingw-add-_exec_prefix-for-tcltk-dlls.patch"
	epatch "0800-mingw-install-layout-as-posix.patch"
	epatch "0820-mingw-reorder-bininstall-ln-symlink-creation.patch"
	epatch "0830-add-build-sysroot-config-option.patch"
	epatch "0840-add-builddir-to-library_dirs.patch"
	epatch "0845-Remove-compiler-lib-dirs-from-extension-lib-dirs.patch"
	epatch "0850-cross-PYTHON_FOR_BUILD-gteq-276-and-fullpath-it.patch"
	epatch "0855-mingw-fix-ssl-dont-use-enum_certificates.patch"
	epatch "0860-mingw-build-optimized-ext.patch"
	epatch "0870-mingw-add-LIBPL-to-library-dirs.patch"
	epatch "0910-fix-using-dllhandle-and-winver-mingw.patch"
	epatch "0970-Add-AMD64-to-sys-config-so-msvccompiler-get_build_version-works.patch"
	epatch "0980-mingw-readline-features-skip.patch"

	echo "Apply Alexey Pavlov's mingw-w64 patches (2)"
	epatch "1000-dont-link-with-gettext-2.7.17.patch"
	epatch "1010-ctypes-python-dll.patch"
	epatch "1020-gdbm-module-includes.patch"
	epatch "1030-use-gnu_printf-in-format.patch"
	epatch "1040-install-msilib.patch"
	epatch "1050-skip-add-db-includes-for-win.patch"
	epatch "1850-disable-readline.patch"
	epatch "1900-ctypes-dont-depend-on-internal-libffi.patch"

	echo "Apply Renato Silva's patch to distutils"
	epatch "2000-distutils-add-windmc-to-cygwinccompiler.patch"

	# Extend some isatty calls to check for mintty when checking for
	# a terminal output. Disable the readline module under non-mintty as it
	# breaks things with a real console (like conemu or winpty)
	# https://github.com/Alexpux/MINGW-packages/issues/2645
	# https://github.com/Alexpux/MINGW-packages/issues/2656
	epatch "2700-cygpty-isatty-disable-readline-2.7.14.patch"

	# gdbm is broken and as a result breaks anydbm/shelve.
	# Don't include it so the dumbdbm backend is used instead,
	# like with the official CPython build.
	epatch "2701-disable-broken-gdbm-module.patch"

	echo "Apply Alexey Chernov's mingw patches"
	epatch "3000-mingwrt4-dllmain.patch"
	epatch "3001-mingw-distutils-changeroot.patch"

	eautoreconf

	  # Enable built-in SQLite module to load extensions (fix FS#22122)
	sed -i "/SQLITE_OMIT_LOAD_EXTENSION/d" setup.py

	# FS#23997
	sed -i -e "s|^#.* /usr/local/bin/python|#!/usr/bin/env python2|" Lib/cgi.py

	sed -i "s/python2.3/python2/g" Lib/distutils/tests/test_build_scripts.py \
		Lib/distutils/tests/test_install_scripts.py Tools/scripts/gprof2html.py

	touch Include/graminit.h
	touch Python/graminit.c
	touch Parser/Python.asdl
	touch Parser/asdl.py
	touch Parser/asdl_c.py
	touch Include/Python-ast.h
	touch Python/Python-ast.c
	echo \"\" > Parser/pgen.stamp

	# Ensure that we are using the system copy of various libraries (expat, zlib and libffi),
	# rather than copies shipped in the tarball 
	rm -rf Modules/expat
	rm -rf Modules/_ctypes/{darwin,libffi}*
	rm -rf Modules/zlib
}

src_configure()
{
	LIBFFI_INC=`pkg-config libffi --cflags-only-I | sed "s|\-I||g"`
	export LIBFFI_INCLUDEDIR=`posix_w32path ${LIBFFI_INC}`

	# Workaround for conftest error on 64-bit builds
	export ac_cv_working_tzset=no

	MSYSTEM=MINGW econf --enable-shared --with-threads \
		--with-system-ffi --with-system-expat \
		OPT=""
}

src_install()
{
	mkdir -p "${INSTDIR}"
	local w32destdir=`posix_w32path ${INSTDIR}`
	local w32prefix=`posix_w32path ${PREFIX}`

	MSYSTEM=MINGW \
		MSYS2_ARG_CONV_EXCL="--prefix=;--install-scripts=;--install-platlib=" \
			make DESTDIR="${w32destdir}" install || die "install failed!"

	mv "${INSTDIR}${PREFIX}"/bin/smtpd.py "${INSTDIR}${PREFIX}"/lib/python${_pybasever}/

	# gdb support for debugging Python itself (needs options='debug',
	# *may* work better on i686 due to frame pointer always being available) to use:
	# python
	# sys.path.append('C:/msys64/mingw64/share/gdb/python2')
	# import python_gdb
	# reload(python_gdb)
	# end
	[[ -d "${INSTDIR}${PREFIX}"/share/gdb/python2/ ]] || mkdir -p "${INSTDIR}${PREFIX}"/share/gdb/python2/
	cp -f python.exe-gdb.py "${INSTDIR}${PREFIX}"/share/gdb/python2/python_gdb.py

	# Copy python import library to $prefix/lib because some programs can't find it in other locations
	cp "${INSTDIR}${PREFIX}"/lib/python${_pybasever}/config/libpython${_pybasever}.dll.a "${INSTDIR}${PREFIX}"/lib/libpython${_pybasever}.dll.a

	# some useful "stuff"
	install -dm755 "${INSTDIR}${PREFIX}"/lib/python${_pybasever}/Tools/{i18n,scripts}
	install -m755 "${WORKDIR}/${SOURCES_DIR}"/Tools/i18n/{msgfmt,pygettext}.py "${INSTDIR}${PREFIX}"/lib/python${_pybasever}/Tools/i18n/
	install -m755 "${WORKDIR}/${SOURCES_DIR}"/Tools/scripts/{README,*py} "${INSTDIR}${PREFIX}"/lib/python${_pybasever}/Tools/scripts/

	# clean up #!s
	find "${INSTDIR}${PREFIX}"/lib/python${_pybasever}/ -name '*.py' | \
		xargs sed -i "s|#[ ]*![ ]*/usr/bin/env python$|#!/usr/bin/env python2|"

	# clean-up reference to build directory
	sed -i "s#${WORKDIR}/${SOURCES_DIR}:##" "${INSTDIR}${PREFIX}"/lib/python${_pybasever}/config/Makefile

	for fscripts in 2to3 idle pydoc; do
		sed -e "s|${w32prefix}/bin/|/usr/bin/env |g" -i "${INSTDIR}${PREFIX}"/bin/$fscripts
	done

	for fscripts in python${_pybasever}-config python2-config python-config; do
		sed -i "s|#!${PREFIX}/bin/python${_pybasever}.exe|#!/usr/bin/env python${_pybasever}.exe|" "${INSTDIR}${PREFIX}"/bin/$fscripts
	done

	# Fix up two instances of MSYS2 paths in python-config.sh in-case the final consumer of the results are native executables.
	sed -e "s|${PREFIX}|${w32prefix}|" -i "${INSTDIR}${PREFIX}"/bin/python-config.sh

	# replace paths in sysconfig
	sed -i "s|${INSTDIR}${PREFIX}|${PREFIX}|g" \
		"${INSTDIR}${PREFIX}"/lib/python${_pybasever}/_sysconfigdata.py \
		"${INSTDIR}${PREFIX}"/lib/python${_pybasever}/smtpd.py

	# Create python executable with windows subsystem
	cp -f "${INSTDIR}${PREFIX}"/bin/python2.exe "${INSTDIR}${PREFIX}"/bin/python2w.exe
	${PREFIX}/bin/objcopy --subsystem windows "${INSTDIR}${PREFIX}"/bin/python2w.exe
}

diff -urBb OpenJPEG_v1_3-orig/CMakeLists.txt OpenJPEG_v1_3/CMakeLists.txt
--- OpenJPEG_v1_3-orig/CMakeLists.txt	2007-12-21 13:39:41 +0300
+++ OpenJPEG_v1_3/CMakeLists.txt	2010-07-04 23:32:30 +0400
@@ -36,6 +36,9 @@
   SOVERSION "${OPENJPEG_VERSION_MAJOR}.${OPENJPEG_VERSION_MINOR}"
 )
 
+IF(WIN32)
+	add_definitions(-DWIN32)
+endif()
 
 #-----------------------------------------------------------------------------
 # OpenJPEG build configuration options.
diff -urBb OpenJPEG_v1_3-orig/jp3d/codec/CMakeLists.txt OpenJPEG_v1_3/jp3d/codec/CMakeLists.txt
--- OpenJPEG_v1_3-orig/jp3d/codec/CMakeLists.txt	2007-09-06 14:51:38 +0400
+++ OpenJPEG_v1_3/jp3d/codec/CMakeLists.txt	2010-07-04 23:32:30 +0400
@@ -20,7 +20,7 @@
   ADD_DEFINITIONS(-DDONT_HAVE_GETOPT)
   SET(common_SRCS
     ${common_SRCS}
-    compat/getopt.c
+    getopt.c
   )
 ENDIF(DONT_HAVE_GETOPT)
 
diff -urBb OpenJPEG_v1_3-orig/jp3d/libjp3dvm/CMakeLists.txt OpenJPEG_v1_3/jp3d/libjp3dvm/CMakeLists.txt
--- OpenJPEG_v1_3-orig/jp3d/libjp3dvm/CMakeLists.txt	2007-09-06 14:51:38 +0400
+++ OpenJPEG_v1_3/jp3d/libjp3dvm/CMakeLists.txt	2010-07-04 23:33:23 +0400
@@ -15,10 +15,16 @@
 
 # Create the library
 #ADD_LIBRARY(${OPENJPEG_LIBRARY_NAME} ${OPENJPEG_SRCS})
-ADD_LIBRARY(${OPJ_PREFIX}openjp3dvm ${JP3DVM_SRCS})
+ADD_LIBRARY(openjp3dvm ${JP3DVM_SRCS})
 
 # Install library
-INSTALL_TARGETS(/lib/ ${OPJ_PREFIX}openjp3dvm)
+INSTALL(TARGETS openjp3dvm
+	RUNTIME DESTINATION bin
+	LIBRARY DESTINATION lib
+	ARCHIVE DESTINATION lib)
 
 # Install includes files
-INSTALL_FILES(/include .h)
+INSTALL(FILES
+		bio.h cio.h dwt.h event.h fix.h int.h jp3d.h jp3d_lib.h mct.h mqc.h
+		openjpeg.h opj_includes.h pi.h raw.h t1.h t1_3d.h t2.h tcd.h tgt.h volume.h
+	DESTINATION include/openjpeg/libjp3dvm)
diff -urBb OpenJPEG_v1_3-orig/jpwl/CMakeLists.txt OpenJPEG_v1_3/jpwl/CMakeLists.txt
--- OpenJPEG_v1_3-orig/jpwl/CMakeLists.txt	2007-09-06 14:23:40 +0400
+++ OpenJPEG_v1_3/jpwl/CMakeLists.txt	2010-07-04 23:32:30 +0400
@@ -2,29 +2,10 @@
 
 ADD_DEFINITIONS(-DUSE_JPWL)
 
-SET(OPJ_SRCS 
-../libopenjpeg/bio.c 
-../libopenjpeg/cio.c 
-../libopenjpeg/dwt.c 
-../libopenjpeg/event.c 
-../libopenjpeg/image.c 
-../libopenjpeg/j2k.c 
-../libopenjpeg/j2k_lib.c 
-../libopenjpeg/jp2.c 
-../libopenjpeg/jpt.c 
-../libopenjpeg/mct.c 
-../libopenjpeg/mqc.c 
-../libopenjpeg/openjpeg.c 
-../libopenjpeg/pi.c 
-../libopenjpeg/raw.c 
-../libopenjpeg/t1.c 
-../libopenjpeg/t2.c 
-../libopenjpeg/tcd.c 
-../libopenjpeg/tgt.c
-)
 SET(JPWL_SRCS crc.c jpwl.c jpwl_lib.c rs.c)
 
 ADD_LIBRARY(openjpeg_JPWL ${JPWL_SRCS} ${OPJ_SRCS})
+TARGET_LINK_LIBRARIES(openjpeg_JPWL ${OPENJPEG_LIBRARY_NAME})
 
 # Do the proper thing when building static...if only there was configured
 # headers or def files instead
@@ -39,7 +20,7 @@
 FIND_PACKAGE(TIFF REQUIRED)
 
 ADD_EXECUTABLE(JPWL_j2k_to_image
-../codec/convert.c ../codec/j2k_to_image.c
+../codec/convert.c ../codec/index.c ../codec/j2k_to_image.c
 )
 TARGET_LINK_LIBRARIES(JPWL_j2k_to_image openjpeg_JPWL ${TIFF_LIBRARIES})
 IF(UNIX)
@@ -47,7 +28,7 @@
 ENDIF(UNIX)
 
 ADD_EXECUTABLE(JPWL_image_to_j2k
-../codec/convert.c ../codec/image_to_j2k.c)
+../codec/convert.c ../codec/index.c ../codec/image_to_j2k.c)
 TARGET_LINK_LIBRARIES(JPWL_image_to_j2k openjpeg_JPWL ${TIFF_LIBRARIES})
 IF(UNIX)
   TARGET_LINK_LIBRARIES(JPWL_image_to_j2k m)
diff -urBb OpenJPEG_v1_3-orig/jpwl/jpwl.c OpenJPEG_v1_3/jpwl/jpwl.c
--- OpenJPEG_v1_3-orig/jpwl/jpwl.c	2007-11-29 17:38:26 +0300
+++ OpenJPEG_v1_3/jpwl/jpwl.c	2010-07-04 23:32:30 +0400
@@ -122,19 +122,19 @@
 		switch (jwmarker[mm].id) {
 
 		case J2K_MS_EPB:
-			free(jwmarker[mm].epbmark);
+			opj_free(jwmarker[mm].mark.epbmark);
 			break;
 
 		case J2K_MS_EPC:
-			free(jwmarker[mm].epcmark);
+			opj_free(jwmarker[mm].mark.epcmark);
 			break;
 
 		case J2K_MS_ESD:
-			free(jwmarker[mm].esdmark);
+			opj_free(jwmarker[mm].mark.esdmark);
 			break;
 
 		case J2K_MS_RED:
-			free(jwmarker[mm].redmark);
+			opj_free(jwmarker[mm].mark.redmark);
 			break;
 
 		default:
@@ -213,7 +213,7 @@
 		/* Add this marker to the 'insertanda' list */
 		if (epc_mark) {
 			jwmarker[jwmarker_num].id = J2K_MS_EPC; /* its type */
-			jwmarker[jwmarker_num].epcmark = epc_mark; /* the EPC */
+			jwmarker[jwmarker_num].mark.epcmark = epc_mark; /* the EPC */
 			jwmarker[jwmarker_num].pos = soc_pos + socsiz_len; /* after SIZ */
 			jwmarker[jwmarker_num].dpos = (double) jwmarker[jwmarker_num].pos + 0.1; /* not so first */
 			jwmarker[jwmarker_num].len = epc_mark->Lepc; /* its length */
@@ -258,7 +258,7 @@
 			/* Add this marker to the 'insertanda' list */
 			if (jwmarker_num < JPWL_MAX_NO_MARKERS) {
 				jwmarker[jwmarker_num].id = J2K_MS_ESD; /* its type */
-				jwmarker[jwmarker_num].esdmark = esd_mark; /* the EPB */
+				jwmarker[jwmarker_num].mark.esdmark = esd_mark; /* the EPB */
 				jwmarker[jwmarker_num].pos = soc_pos + socsiz_len; /* we choose to place it after SIZ */
 				jwmarker[jwmarker_num].dpos = (double) jwmarker[jwmarker_num].pos + 0.2; /* not first at all! */
 				jwmarker[jwmarker_num].len = esd_mark->Lesd; /* its length */
@@ -352,7 +352,7 @@
 					/* Add this marker to the 'insertanda' list */
 					if (jwmarker_num < JPWL_MAX_NO_MARKERS) {
 						jwmarker[jwmarker_num].id = J2K_MS_ESD; /* its type */
-						jwmarker[jwmarker_num].esdmark = esd_mark; /* the EPB */
+						jwmarker[jwmarker_num].mark.esdmark = esd_mark; /* the EPB */
 						/****** jwmarker[jwmarker_num].pos = j2k->cstr_info->tile[tileno].start_pos + sot_len + 2; */ /* after SOT */
 						jwmarker[jwmarker_num].pos = j2k->cstr_info->tile[tileno].tp[tpno].tp_start_pos + sot_len + 2; /* after SOT */
 						jwmarker[jwmarker_num].dpos = (double) jwmarker[jwmarker_num].pos + 0.2; /* not first at all! */
@@ -430,7 +430,7 @@
 			/* Add this marker to the 'insertanda' list */
 			if (jwmarker_num < JPWL_MAX_NO_MARKERS) {
 				jwmarker[jwmarker_num].id = J2K_MS_EPB; /* its type */
-				jwmarker[jwmarker_num].epbmark = epb_mark; /* the EPB */
+				jwmarker[jwmarker_num].mark.epbmark = epb_mark; /* the EPB */
 				jwmarker[jwmarker_num].pos = soc_pos + socsiz_len; /* after SIZ */
 				jwmarker[jwmarker_num].dpos = (double) jwmarker[jwmarker_num].pos; /* first first first! */
 				jwmarker[jwmarker_num].len = epb_mark->Lepb; /* its length */
@@ -528,7 +528,7 @@
 					/* Add this marker to the 'insertanda' list */
 					if (jwmarker_num < JPWL_MAX_NO_MARKERS) {
 						jwmarker[jwmarker_num].id = J2K_MS_EPB; /* its type */
-						jwmarker[jwmarker_num].epbmark = epb_mark; /* the EPB */
+						jwmarker[jwmarker_num].mark.epbmark = epb_mark; /* the EPB */
 						/****** jwmarker[jwmarker_num].pos = j2k->cstr_info->tile[tileno].start_pos + sot_len + 2; */ /* after SOT */
 						jwmarker[jwmarker_num].pos = j2k->cstr_info->tile[tileno].tp[tpno].tp_start_pos + sot_len + 2; /* after SOT */
 						jwmarker[jwmarker_num].dpos = (double) jwmarker[jwmarker_num].pos; /* first first first! */
@@ -758,15 +758,15 @@
 		switch (jwmarker[mm].id) {
 
 		case J2K_MS_EPB:
-			jpwl_epb_write(j2k, jwmarker[mm].epbmark, jpwl_buf);
+			jpwl_epb_write(j2k, jwmarker[mm].mark.epbmark, jpwl_buf);
 			break;
 
 		case J2K_MS_EPC:
-			jpwl_epc_write(j2k, jwmarker[mm].epcmark, jpwl_buf);
+			jpwl_epc_write(j2k, jwmarker[mm].mark.epcmark, jpwl_buf);
 			break;
 
 		case J2K_MS_ESD:
-			jpwl_esd_write(j2k, jwmarker[mm].esdmark, jpwl_buf);
+			jpwl_esd_write(j2k, jwmarker[mm].mark.esdmark, jpwl_buf);
 			break;
 
 		case J2K_MS_RED:
@@ -812,11 +812,11 @@
 			unsigned short int mycrc = 0x0000;
 
 			/* fix and fill the DL field */
-			jwmarker[mm].epcmark->DL = new_size;
-			orig_buf[epc_pos + 6] = (unsigned char) (jwmarker[mm].epcmark->DL >> 24);
-			orig_buf[epc_pos + 7] = (unsigned char) (jwmarker[mm].epcmark->DL >> 16);
-			orig_buf[epc_pos + 8] = (unsigned char) (jwmarker[mm].epcmark->DL >> 8);
-			orig_buf[epc_pos + 9] = (unsigned char) (jwmarker[mm].epcmark->DL >> 0);
+			jwmarker[mm].mark.epcmark->DL = new_size;
+			orig_buf[epc_pos + 6] = (unsigned char) (jwmarker[mm].mark.epcmark->DL >> 24);
+			orig_buf[epc_pos + 7] = (unsigned char) (jwmarker[mm].mark.epcmark->DL >> 16);
+			orig_buf[epc_pos + 8] = (unsigned char) (jwmarker[mm].mark.epcmark->DL >> 8);
+			orig_buf[epc_pos + 9] = (unsigned char) (jwmarker[mm].mark.epcmark->DL >> 0);
 
 			/* compute the CRC field (excluding itself) */
 			for (pp = 0; pp < 4; pp++)
@@ -825,9 +825,9 @@
 				jpwl_updateCRC16(&mycrc, orig_buf[epc_pos + pp]);
 
 			/* fix and fill the CRC */
-			jwmarker[mm].epcmark->Pcrc = mycrc;
-			orig_buf[epc_pos + 4] = (unsigned char) (jwmarker[mm].epcmark->Pcrc >> 8);
-			orig_buf[epc_pos + 5] = (unsigned char) (jwmarker[mm].epcmark->Pcrc >> 0);
+			jwmarker[mm].mark.epcmark->Pcrc = mycrc;
+			orig_buf[epc_pos + 4] = (unsigned char) (jwmarker[mm].mark.epcmark->Pcrc >> 8);
+			orig_buf[epc_pos + 5] = (unsigned char) (jwmarker[mm].mark.epcmark->Pcrc >> 0);
 
 		}
 	}
@@ -842,7 +842,7 @@
 			/* remember that they are now in a new position (dpos) */
 			int esd_pos = (int) jwmarker[mm].dpos;
 
-			jpwl_esd_fill(j2k, jwmarker[mm].esdmark, &orig_buf[esd_pos]);
+			jpwl_esd_fill(j2k, jwmarker[mm].mark.esdmark, &orig_buf[esd_pos]);
 		
 		}
 
@@ -867,16 +867,16 @@
 			accum_len = 0;
 			for (nn = mm; (nn < jwmarker_num) && (jwmarker[nn].id == J2K_MS_EPB) &&
 				(jwmarker[nn].pos == jwmarker[mm].pos); nn++)
-				accum_len += jwmarker[nn].epbmark->Lepb + 2;
+				accum_len += jwmarker[nn].mark.epbmark->Lepb + 2;
 
 			/* fill the current (first) EPB with post-data starting from the computed position */
-			jpwl_epb_fill(j2k, jwmarker[mm].epbmark, &orig_buf[(int) jwmarker[mm].dpos],
+			jpwl_epb_fill(j2k, jwmarker[mm].mark.epbmark, &orig_buf[(int) jwmarker[mm].dpos],
 				&orig_buf[(int) jwmarker[mm].dpos + accum_len]);
 		
 			/* fill the remaining EPBs in the header with post-data starting from the last position */
 			for (nn = mm + 1; (nn < jwmarker_num) && (jwmarker[nn].id == J2K_MS_EPB) &&
 				(jwmarker[nn].pos == jwmarker[mm].pos); nn++)
-				jpwl_epb_fill(j2k, jwmarker[nn].epbmark, &orig_buf[(int) jwmarker[nn].dpos], NULL);
+				jpwl_epb_fill(j2k, jwmarker[nn].mark.epbmark, &orig_buf[(int) jwmarker[nn].dpos], NULL);
 
 			/* skip all the processed EPBs */
 			mm = nn - 1;
diff -urBb OpenJPEG_v1_3-orig/jpwl/jpwl.h OpenJPEG_v1_3/jpwl/jpwl.h
--- OpenJPEG_v1_3-orig/jpwl/jpwl.h	2007-11-05 16:05:07 +0300
+++ OpenJPEG_v1_3/jpwl/jpwl.h	2010-07-04 23:32:30 +0400
@@ -188,7 +188,7 @@
 		jpwl_esd_ms_t *esdmark;
 		/** pointer to RED marker */
 		jpwl_red_ms_t *redmark;
-	};
+	} mark;
 	/** position where the marker should go, in the pre-JPWL codestream */ 
 	unsigned long int pos;
 	/** same as before, only written as a double, so we can sort it better */
diff -urBb OpenJPEG_v1_3-orig/jpwl/jpwl_lib.c OpenJPEG_v1_3/jpwl/jpwl_lib.c
--- OpenJPEG_v1_3-orig/jpwl/jpwl_lib.c	2007-11-29 17:38:26 +0300
+++ OpenJPEG_v1_3/jpwl/jpwl_lib.c	2010-07-04 23:32:30 +0400
@@ -166,7 +166,7 @@
 			/* Add this marker to the 'insertanda' list */
 			if (*jwmarker_num < JPWL_MAX_NO_MARKERS) {
 				jwmarker[*jwmarker_num].id = J2K_MS_EPB; /* its type */
-				jwmarker[*jwmarker_num].epbmark = epb_mark; /* the EPB */
+				jwmarker[*jwmarker_num].mark.epbmark = epb_mark; /* the EPB */
 				jwmarker[*jwmarker_num].pos = (int) place_pos; /* after SOT */
 				jwmarker[*jwmarker_num].dpos = place_pos + 0.0000001 * (double)(*idx); /* not very first! */
 				jwmarker[*jwmarker_num].len = epb_mark->Lepb; /* its length */
@@ -335,7 +335,7 @@
 	jpwl_epc_ms_t *epc = NULL;
 
 	/* Alloc space */
-	if (!(epc = (jpwl_epc_ms_t *) malloc((size_t) 1 * sizeof (jpwl_epc_ms_t)))) {
+	if (!(epc = (jpwl_epc_ms_t *) opj_malloc((size_t) 1 * sizeof (jpwl_epc_ms_t)))) {
 		opj_event_msg(j2k->cinfo, EVT_ERROR, "Could not allocate room for EPC MS\n");
 		return NULL;
 	};
@@ -1196,7 +1196,7 @@
 	jpwl_esd_ms_t *esd = NULL;
 
 	/* Alloc space */
-	if (!(esd = (jpwl_esd_ms_t *) malloc((size_t) 1 * sizeof (jpwl_esd_ms_t)))) {
+	if (!(esd = (jpwl_esd_ms_t *) opj_malloc((size_t) 1 * sizeof (jpwl_esd_ms_t)))) {
 		opj_event_msg(j2k->cinfo, EVT_ERROR, "Could not allocate room for ESD MS\n");
 		return NULL;
 	};
diff -urBb OpenJPEG_v1_3-orig/libopenjpeg/CMakeLists.txt OpenJPEG_v1_3/libopenjpeg/CMakeLists.txt
--- OpenJPEG_v1_3-orig/libopenjpeg/CMakeLists.txt	2007-09-25 18:54:49 +0400
+++ OpenJPEG_v1_3/libopenjpeg/CMakeLists.txt	2010-07-04 23:33:08 +0400
@@ -37,8 +37,10 @@
 
 # Install library
 INSTALL(TARGETS ${OPENJPEG_LIBRARY_NAME}
-	DESTINATION lib)
+	RUNTIME DESTINATION bin
+	LIBRARY DESTINATION lib
+	ARCHIVE DESTINATION lib)
 
 # Install includes files
 INSTALL(FILES openjpeg.h
-	DESTINATION ${INCLUDE_INSTALL_DIR}/openjpeg)
+	DESTINATION include)
diff -urBb OpenJPEG_v1_3-orig/libopenjpeg/cio.h OpenJPEG_v1_3/libopenjpeg/cio.h
--- OpenJPEG_v1_3-orig/libopenjpeg/cio.h	2007-01-15 12:55:40 +0300
+++ OpenJPEG_v1_3/libopenjpeg/cio.h	2010-07-04 23:32:30 +0400
@@ -49,13 +49,13 @@
 @param cio CIO handle
 @return Returns the number of bytes before the end of the stream
 */
-int cio_numbytesleft(opj_cio_t *cio);
+OPJ_API int cio_numbytesleft(opj_cio_t *cio);
 /**
 Get pointer to the current position in the stream
 @param cio CIO handle
 @return Returns a pointer to the current position
 */
-unsigned char *cio_getbp(opj_cio_t *cio);
+OPJ_API unsigned char *cio_getbp(opj_cio_t *cio);
 /**
 Write some bytes
 @param cio CIO handle
@@ -63,20 +63,20 @@
 @param n Number of bytes to write
 @return Returns the number of bytes written or 0 if an error occured
 */
-unsigned int cio_write(opj_cio_t *cio, unsigned int v, int n);
+OPJ_API unsigned int cio_write(opj_cio_t *cio, unsigned int v, int n);
 /**
 Read some bytes
 @param cio CIO handle
 @param n Number of bytes to read
 @return Returns the value of the n bytes read
 */
-unsigned int cio_read(opj_cio_t *cio, int n);
+OPJ_API unsigned int cio_read(opj_cio_t *cio, int n);
 /**
 Skip some bytes
 @param cio CIO handle
 @param n Number of bytes to skip
 */
-void cio_skip(opj_cio_t *cio, int n);
+OPJ_API void cio_skip(opj_cio_t *cio, int n);
 /* ----------------------------------------------------------------------- */
 /*@}*/
 
diff -urBb OpenJPEG_v1_3-orig/libopenjpeg/event.h OpenJPEG_v1_3/libopenjpeg/event.h
--- OpenJPEG_v1_3-orig/libopenjpeg/event.h	2006-01-25 12:17:16 +0300
+++ OpenJPEG_v1_3/libopenjpeg/event.h	2010-07-04 23:32:30 +0400
@@ -49,7 +49,7 @@
 @param fmt Format-control string (plus optionnal arguments)
 @return Returns true if successful, returns false otherwise
 */
-bool opj_event_msg(opj_common_ptr cinfo, int event_type, const char *fmt, ...);
+OPJ_API bool opj_event_msg(opj_common_ptr cinfo, int event_type, const char *fmt, ...);
 /* ----------------------------------------------------------------------- */
 /*@}*/
 
diff -urBb OpenJPEG_v1_3-orig/libopenjpeg/j2k.h OpenJPEG_v1_3/libopenjpeg/j2k.h
--- OpenJPEG_v1_3-orig/libopenjpeg/j2k.h	2007-11-27 17:00:45 +0300
+++ OpenJPEG_v1_3/libopenjpeg/j2k.h	2010-07-04 23:32:30 +0400
@@ -376,19 +376,19 @@
 @param cinfo Codec context info
 @return Returns a handle to a J2K decompressor if successful, returns NULL otherwise
 */
-opj_j2k_t* j2k_create_decompress(opj_common_ptr cinfo);
+OPJ_API opj_j2k_t* j2k_create_decompress(opj_common_ptr cinfo);
 /**
 Destroy a J2K decompressor handle
 @param j2k J2K decompressor handle to destroy
 */
-void j2k_destroy_decompress(opj_j2k_t *j2k);
+OPJ_API void j2k_destroy_decompress(opj_j2k_t *j2k);
 /**
 Setup the decoder decoding parameters using user parameters.
 Decoding parameters are returned in j2k->cp. 
 @param j2k J2K decompressor handle
 @param parameters decompression parameters
 */
-void j2k_setup_decoder(opj_j2k_t *j2k, opj_dparameters_t *parameters);
+OPJ_API void j2k_setup_decoder(opj_j2k_t *j2k, opj_dparameters_t *parameters);
 /**
 Decode an image from a JPEG-2000 codestream
 @param j2k J2K decompressor handle
@@ -396,7 +396,7 @@
 @param cstr_info Codestream information structure if required, NULL otherwise
 @return Returns a decoded image if successful, returns NULL otherwise
 */
-opj_image_t* j2k_decode(opj_j2k_t *j2k, opj_cio_t *cio, opj_codestream_info_t *cstr_info);
+OPJ_API opj_image_t* j2k_decode(opj_j2k_t *j2k, opj_cio_t *cio, opj_codestream_info_t *cstr_info);
 /**
 Decode an image form a JPT-stream (JPEG 2000, JPIP)
 @param j2k J2K decompressor handle
@@ -404,18 +404,18 @@
 @param cstr_info Codestream information structure if required, NULL otherwise
 @return Returns a decoded image if successful, returns NULL otherwise
 */
-opj_image_t* j2k_decode_jpt_stream(opj_j2k_t *j2k, opj_cio_t *cio, opj_codestream_info_t *cstr_info);
+OPJ_API opj_image_t* j2k_decode_jpt_stream(opj_j2k_t *j2k, opj_cio_t *cio, opj_codestream_info_t *cstr_info);
 /**
 Creates a J2K compression structure
 @param cinfo Codec context info
 @return Returns a handle to a J2K compressor if successful, returns NULL otherwise
 */
-opj_j2k_t* j2k_create_compress(opj_common_ptr cinfo);
+OPJ_API opj_j2k_t* j2k_create_compress(opj_common_ptr cinfo);
 /**
 Destroy a J2K compressor handle
 @param j2k J2K compressor handle to destroy
 */
-void j2k_destroy_compress(opj_j2k_t *j2k);
+OPJ_API void j2k_destroy_compress(opj_j2k_t *j2k);
 /**
 Setup the encoder parameters using the current image and using user parameters. 
 Coding parameters are returned in j2k->cp. 
@@ -423,11 +423,11 @@
 @param parameters compression parameters
 @param image input filled image
 */
-void j2k_setup_encoder(opj_j2k_t *j2k, opj_cparameters_t *parameters, opj_image_t *image);
+OPJ_API void j2k_setup_encoder(opj_j2k_t *j2k, opj_cparameters_t *parameters, opj_image_t *image);
 /**
 Converts an enum type progression order to string type
 */
-char *j2k_convert_progression_order(OPJ_PROG_ORDER prg_order);
+OPJ_API char *j2k_convert_progression_order(OPJ_PROG_ORDER prg_order);
 /**
 Encode an image into a JPEG-2000 codestream
 @param j2k J2K compressor handle
@@ -436,7 +436,7 @@
 @param cstr_info Codestream information structure if required, NULL otherwise
 @return Returns true if successful, returns false otherwise
 */
-bool j2k_encode(opj_j2k_t *j2k, opj_cio_t *cio, opj_image_t *image, opj_codestream_info_t *cstr_info);
+OPJ_API bool j2k_encode(opj_j2k_t *j2k, opj_cio_t *cio, opj_image_t *image, opj_codestream_info_t *cstr_info);
 
 /* ----------------------------------------------------------------------- */
 /*@}*/
diff -urBb OpenJPEG_v1_3-orig/libopenjpeg/j2k_lib.h OpenJPEG_v1_3/libopenjpeg/j2k_lib.h
--- OpenJPEG_v1_3-orig/libopenjpeg/j2k_lib.h	2007-10-18 16:26:11 +0400
+++ OpenJPEG_v1_3/libopenjpeg/j2k_lib.h	2010-07-04 23:32:30 +0400
@@ -43,7 +43,7 @@
 Difference in successive opj_clock() calls tells you the elapsed time
 @return Returns time in seconds
 */
-double opj_clock(void);
+OPJ_API double opj_clock(void);
 
 /* ----------------------------------------------------------------------- */
 /*@}*/
diff -urBb OpenJPEG_v1_3-orig/libopenjpeg/jp2.h OpenJPEG_v1_3/libopenjpeg/jp2.h
--- OpenJPEG_v1_3-orig/libopenjpeg/jp2.h	2007-09-07 19:01:55 +0400
+++ OpenJPEG_v1_3/libopenjpeg/jp2.h	2010-07-04 23:32:30 +0400
@@ -106,32 +106,32 @@
 @param jp2 JP2 handle
 @param cio Output buffer stream
 */
-void jp2_write_jp2h(opj_jp2_t *jp2, opj_cio_t *cio);
+OPJ_API void jp2_write_jp2h(opj_jp2_t *jp2, opj_cio_t *cio);
 /**
 Read the JP2H box - JP2 Header box (used in MJ2)
 @param jp2 JP2 handle
 @param cio Input buffer stream
 @return Returns true if successful, returns false otherwise
 */
-bool jp2_read_jp2h(opj_jp2_t *jp2, opj_cio_t *cio);
+OPJ_API bool jp2_read_jp2h(opj_jp2_t *jp2, opj_cio_t *cio);
 /**
 Creates a JP2 decompression structure
 @param cinfo Codec context info
 @return Returns a handle to a JP2 decompressor if successful, returns NULL otherwise
 */
-opj_jp2_t* jp2_create_decompress(opj_common_ptr cinfo);
+OPJ_API opj_jp2_t* jp2_create_decompress(opj_common_ptr cinfo);
 /**
 Destroy a JP2 decompressor handle
 @param jp2 JP2 decompressor handle to destroy
 */
-void jp2_destroy_decompress(opj_jp2_t *jp2);
+OPJ_API void jp2_destroy_decompress(opj_jp2_t *jp2);
 /**
 Setup the decoder decoding parameters using user parameters.
 Decoding parameters are returned in jp2->j2k->cp. 
 @param jp2 JP2 decompressor handle
 @param parameters decompression parameters
 */
-void jp2_setup_decoder(opj_jp2_t *jp2, opj_dparameters_t *parameters);
+OPJ_API void jp2_setup_decoder(opj_jp2_t *jp2, opj_dparameters_t *parameters);
 /**
 Decode an image from a JPEG-2000 file stream
 @param jp2 JP2 decompressor handle
@@ -139,18 +139,18 @@
 @param cstr_info Codestream information structure if required, NULL otherwise
 @return Returns a decoded image if successful, returns NULL otherwise
 */
-opj_image_t* jp2_decode(opj_jp2_t *jp2, opj_cio_t *cio, opj_codestream_info_t *cstr_info);
+OPJ_API opj_image_t* jp2_decode(opj_jp2_t *jp2, opj_cio_t *cio, opj_codestream_info_t *cstr_info);
 /**
 Creates a JP2 compression structure
 @param cinfo Codec context info
 @return Returns a handle to a JP2 compressor if successful, returns NULL otherwise
 */
-opj_jp2_t* jp2_create_compress(opj_common_ptr cinfo);
+OPJ_API opj_jp2_t* jp2_create_compress(opj_common_ptr cinfo);
 /**
 Destroy a JP2 compressor handle
 @param jp2 JP2 compressor handle to destroy
 */
-void jp2_destroy_compress(opj_jp2_t *jp2);
+OPJ_API void jp2_destroy_compress(opj_jp2_t *jp2);
 /**
 Setup the encoder parameters using the current image and using user parameters. 
 Coding parameters are returned in jp2->j2k->cp. 
@@ -158,7 +158,7 @@
 @param parameters compression parameters
 @param image input filled image
 */
-void jp2_setup_encoder(opj_jp2_t *jp2, opj_cparameters_t *parameters, opj_image_t *image);
+OPJ_API void jp2_setup_encoder(opj_jp2_t *jp2, opj_cparameters_t *parameters, opj_image_t *image);
 /**
 Encode an image into a JPEG-2000 file stream
 @param jp2 JP2 compressor handle
@@ -167,7 +167,7 @@
 @param cstr_info Codestream information structure if required, NULL otherwise
 @return Returns true if successful, returns false otherwise
 */
-bool jp2_encode(opj_jp2_t *jp2, opj_cio_t *cio, opj_image_t *image, opj_codestream_info_t *cstr_info);
+OPJ_API bool jp2_encode(opj_jp2_t *jp2, opj_cio_t *cio, opj_image_t *image, opj_codestream_info_t *cstr_info);
 /* ----------------------------------------------------------------------- */
 /*@}*/
 

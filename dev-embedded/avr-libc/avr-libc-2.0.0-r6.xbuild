# Copyright 2017-2019 Chernov A.A.
# This is a part of mingw-portage project: 
# http://sourceforge.net/projects/mingwportage/
# Distributed under the terms of the GNU General Public License v2

DESCRIPTION="C library for Atmel AVR microcontrollers"

HOMEPAGE="http://www.nongnu.org/avr-libc/"

RESTRICT="strip"

GCC_PN="gcc"
GCC_PV="9.1.0"
GCC_P="${GCC_PN}-${GCC_PV}"
GCC_PATCHV="9.1.0"
GCC_SOURCES_DIR="${GCC_PN}-${GCC_PV}"

SRC_URI="https://savannah.nongnu.org/download/avr-libc/${P}.tar.bz2
		http://ftp.gnu.org/gnu/gcc/${GCC_PV}/${GCC_P}.tar.xz"

LICENSE="BSD"

DEPEND=">=dev-embedded/avr-binutils-2.27
		>=meta-virtual/system-headers-3
		>=meta-virtual/system-libc-3
		>=meta-virtual/pthreads-2
		>=sys-devel/binutils-2.25"

RDEPEND=">=dev-libs/gmp-5.1.3
		>=dev-util/mpfr-3.1.2
		>=dev-libs/mpc-1.0.2
		meta-virtual/pthreads
		sys-devel/libiconv
		>=dev-libs/isl-0.16"

BUILD_IN_SEPARATE_DIR=yes

gcc_src_unpack()
{
	# exclude unsupported by mingw/mingw64 platform
	local exclude_parts="libsanitizer libhsail-rt libitm liboffloadmic"
	# exclude 'ada' language parts
	exclude_parts+=" gcc/ada libada gnattools"
	# exclude 'fortran' language parts
	# We can't remove unused gcc/{language} directories - this will not be delete
	# internal dependencies from build order, see gcc/configure.ac, gcc/{language}/config-lang.in.
	exclude_parts+=" libgfortran libffi"
	# exclude 'objc'&'objcpp' language parts
	exclude_parts+=" libobjc"
	# exclude 'go' language parts
	exclude_parts+=" libgo gotools"
	# exclude testsuite directories
	exclude_parts+=" libatomic/testsuite libgomp/testsuite libiberty/testsuite libstdc++-v3/testsuite libvtv/testsuite"
	# other unused directories
	exclude_parts+=" maintainer-scripts zlib"

	local part=
	local exclude_opts=
	local tarball="${GCC_P}.tar.xz"
	for part in ${exclude_parts}
	do
		exclude_opts+="--exclude=${GCC_SOURCES_DIR}/${part} "
	done
	local f=
	for f in $A
	do
		if [ "$f" = "${tarball}" ]
		then
			ebegin "Unpacking parts of ${tarball}... "
			local f=`find_srcpackage ${tarball}`
			tar -xJf ${f} ${exclude_opts} > /dev/null 2>&1
			if [ $? -eq 0 ]
			then
				eend "OK"
			else
				eend "failed"
				eerror "failed to unpack"
			fi
		fi
	done

	cd "${GCC_P}" || die
	epatch "${GCC_PN}-${GCC_PATCHV}-skip-texinfo.patch"
	epatch "${GCC_PN}-${GCC_PATCHV}-skip-testsuite.patch"
	cd "${WORKDIR}" || die
}

gcc_src_configure()
{
	cd "${WORKDIR}" || die
	mkdir "gcc-stage1-build" || die
	cd "gcc-stage1-build" || die
	../${GCC_P}/configure --prefix="${PREFIX}" --build=${CBUILD} --host=${CHOST} --target=avr \
		--enable-shared --disable-win32-registry --disable-debug --enable-checking=release --disable-werror \
		--with-system-zlib --enable-languages=c,c++ --disable-nls --disable-multilib || die
}

gcc_src_compile()
{
	cd "${WORKDIR}/gcc-stage1-build" || die
	emake
}

src_unpack()
{
	gcc_src_unpack
	cd "${WORKDIR}" || die
	unpack "${P}.tar.bz2"
	cd "${SOURCES_DIR}" || eerror "Can't cd to sources directory!"
}

src_prepare()
{
	echo "patch to revision r2546..."
	patch --binary -p1 -i "${FILESDIR}/${P}-r2546.patch"
	echo "patch for avrxmega3 chips..."
	epatch "${P}-avrxmega3-v7.patch.bz2"
	eautoreconf
}

src_configure()
{
	# build gcc stage1
	echo "... building gcc stage1..."
	gcc_src_configure
	gcc_src_compile
	echo
	echo "... gcc stage1 is prepared."
	echo 

	echo "... Now build avr-libc..."
	echo
	cd "${WORKDIR}/${PF}-build" || die
	export CC="${WORKDIR}/gcc-stage1-build/gcc/xgcc -B${WORKDIR}/gcc-stage1-build/./gcc/ -B${PREFIX}/avr/bin/ -B${PREFIX}/avr/lib/ -isystem ${PREFIX}/avr/include -isystem ${PREFIX}/avr/sys-include"
	export LDFLAGS="-s"
	econf --host=avr || die
}

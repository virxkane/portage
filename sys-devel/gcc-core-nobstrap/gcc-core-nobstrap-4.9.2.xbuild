# Copyright 2010-2015 Chernov A.A.
# Distributed under the terms of the GNU General Public License v2

DESCRIPTION="The GNU Compiler Collection. Only C/C++"

HOMEPAGE="http://gcc.gnu.org/"

LICENSE="GPL-3 LGPL-3 || ( GPL-3 libgcc libstdc++ ) FDL-1.2"

#   external dependecies:
# bison (msys)
# perl (msys)
DEPEND=">=sys-devel/mingw-w64-headers-3.1.0 || >=sys-devel/mingwrt-4.0.3
		>=sys-devel/mingw-w64-crt-3.1.0 || >=sys-devel/mingwrt-4.0.3
		sys-devel/binutils"
RDEPEND="!sys-devel/gcc-core
		>=dev-libs/gmp-5.1.3
		>=dev-util/mpfr-3.1.2
		>=dev-libs/mpc-1.0.2
		meta-virtual/pthreads
		sys-devel/libiconv
		!dev-libs/cloog-ppl
		>=dev-libs/cloog-0.18.0
		>=dev-libs/isl-0.12
		>=dev-libs/libelf-0.8.12"

MY_PN="gcc"
MY_P="${MY_PN}-${PV}"
SRC_URI="http://ftp.gnu.org/gnu/gcc/${MY_P}/${MY_P}.tar.bz2"

SOURCES_DIR="${MY_P}"
BUILD_IN_SEPARATE_DIR=yes

src_unpack()
{
	local exclude_parts="
		boehm-gc
		gcc/ada
		gcc/testsuite
		gnattools
		libada
		libatomic
		libcilkrts
		libffi
		libgfortran
		libgo
		libgomp/testsuite
		libiberty/testsuite
		libitm
		libjava
		libobjc
		libsanitizer
		libstdc++-v3/testsuite
		libvtv
		maintainer-scripts"
	local part=
	local exclude_opts=
	local tarball="${MY_P}.tar.bz2"
	for part in ${exclude_parts}
	do
		exclude_opts+="--exclude=${SOURCES_DIR}/${part} "
	done
	ebegin "Unpacking parts of ${tarball}... "
	local f=`find_srcpackage ${tarball}`
	tar -xjf ${f} ${exclude_opts} 2>&1 > /dev/null
	if [ $? -eq 0 ]
	then
		eend "OK"
	else
		eend "failed"
		eerror "failed to unpack"
	fi
	cd "${SOURCES_DIR}" || eerror "failed to cd to source dir :("
}

src_prepare()
{
	epatch "${MY_P}-skip-texinfo.patch"
	epatch "${MY_P}-skip-testsuite.patch"
}

src_configure()
{
	unset CFLAGS
	unset CXXFLAGS

	local econfp=
	case ${CHOST} in
	x86_64-w64-*)
		#econfp="--enable-sjlj-exceptions --without-dwarf2"
		# without options assumed SEH
		;;
	*)
		econfp="--disable-sjlj-exceptions --with-dwarf2"
		;;
	esac

	econf --enable-shared \
		--disable-win32-registry --enable-version-specific-runtime-libs \
		--disable-debug --enable-checking=release --enable-threads=win32 --enable-libgomp \
		--enable-lto --enable-graphite \
		--with-gmp --with-mpc --with-cloog --with-libelf --with-libiconv \
		--with-system-zlib --enable-libquadmath-support --disable-libada \
		--enable-languages=c,c++ \
		--enable-libstdcxx-time=yes --disable-werror --disable-nls --disable-multilib \
		--disable-bootstrap
		${econfp}
}

src_install()
{
	emake_install
	cp -pv ${INSTDIR}${PREFIX}/bin/gcc.exe ${INSTDIR}${PREFIX}/bin/cc.exe
	case ${CHOST} in
	x86_64-w64-*)
		mv -fv ${INSTDIR}${PREFIX}/lib/gcc/${CHOST}/lib/libgcc_s.a \
				${INSTDIR}${PREFIX}/lib/gcc/${CHOST}/${PV}/
		;;
	esac
}

pkg_postinst()
{
	einfo "Fix specs file..."
	local targspecs=`dirname \`gcc --print-libgcc-file-name\``/specs
	
	local specs="${TMPDIR}/specs"
	local prefix_w=`posix_w32path "${PREFIX}"`

	echo "*mingw_prefix:" > ${specs}
	echo ${prefix_w} >> ${specs}
	echo "" >> ${specs}

	gcc -dumpspecs >> ${specs}

	sed ':a;N;$!ba;s/*cc1plus:\n\n/*cc1plus:\n\-isystem\ \%(mingw_prefix)\/include\n/' ${specs} > ${targspecs}
}

# Copyright 2010-2016 Chernov A.A.
# This is a part of mingw-portage project: 
# http://sourceforge.net/projects/mingwportage/
# Distributed under the terms of the GNU General Public License v2

DESCRIPTION="The GNU Compiler Collection. Only C/C++"

HOMEPAGE="http://gcc.gnu.org/"

LICENSE="GPL-3 LGPL-3 || ( GPL-3 libgcc libstdc++ ) FDL-1.2"

# Known problems:
# Build failed on i686-w64-mingw32 (with dward2 eh).

# TODO: postinst phase needed only for i686-pc-mingw32
# BUG: after compile for mingw: d:\mingw\lib\gcc\i686-pc-mingw32\6.1.0\include\c++\cstdlib:75:25: fatal error: stdlib.h: No such file or directory

#   external dependecies:
# bison (msys)
# perl (msys)

DEPEND=">=meta-virtual/system-headers-3
		>=meta-virtual/system-libc-3
		>=sys-devel/binutils-2.25"
RDEPEND="!sys-devel/gcc-core-nobstrap
		>=dev-libs/gmp-5.1.3
		>=dev-util/mpfr-3.1.2
		>=dev-libs/mpc-1.0.2
		meta-virtual/pthreads
		sys-devel/libiconv
		>=dev-libs/isl-0.16"

MY_PN="gcc"
MY_P="${MY_PN}-${PV}"
SRC_URI="http://ftp.gnu.org/gnu/gcc/${MY_P}/${MY_P}.tar.bz2"

SOURCES_DIR="${MY_P}"
BUILD_IN_SEPARATE_DIR=yes

src_unpack()
{
	# exclude unsupported by mingw/mingw64 platform
	local exclude_parts="libcilkrts libsanitizer libitm libmpx liboffloadmic"
	# exclude 'ada' language parts
	exclude_parts+=" gcc/ada libada gnattools"
	# exclude 'fortran' language parts
	# We can't remove unused gcc/{language} directories - this will not be delete
	# internal dependencies from build order, see gcc/configure.ac, gcc/{language}/config-lang.in.
	exclude_parts+=" libgfortran libffi"
	# exclude 'java' language parts
	exclude_parts+=" libjava"
	# exclude 'objc'&'objcpp' language parts
	exclude_parts+=" libobjc boehm-gc"
	# exclude 'go' language parts
	exclude_parts+=" libgo gotools"
	# exclude testsuite directories
	exclude_parts+=" gcc/testsuite libgomp/testsuite libiberty/testsuite libstdc++-v3/testsuite"
	# other unused directories
	exclude_parts+=" maintainer-scripts zlib"

	local part=
	local exclude_opts=
	local tarball="${MY_P}.tar.bz2"
	for part in ${exclude_parts}
	do
		exclude_opts+="--exclude=${SOURCES_DIR}/${part} "
	done
	local f=
	for f in $A
	do
		if [ "$f" = "${tarball}" ]
		then
			ebegin "Unpacking parts of ${tarball}... "
			local f=`find_srcpackage ${tarball}`
			tar -xjf ${f} ${exclude_opts} > /dev/null 2>&1
			if [ $? -eq 0 ]
			then
				eend "OK"
			else
				eend "failed"
				eerror "failed to unpack"
			fi
		else
			unpack $f
		fi
	done
	cd "${SOURCES_DIR}" || eerror "failed to cd to source dir :("
}

src_prepare()
{
	epatch "${MY_P}-skip-texinfo.patch"
	epatch "${MY_P}-skip-testsuite.patch"
	epatch "${MY_P}-stdthreads.patch"
	#epatch "${MY_PN}-4.8-iconv.patch"
	epatch "${MY_P}-libstdc++export.patch"
	epatch "${MY_P}-mingw-w64-native-dir.patch"
	epatch "${MY_P}-mingw-w64-bootstrap-target-flags.patch"
}

src_configure()
{
	unset CFLAGS
	unset CXXFLAGS

	local econfp=
	case ${CHOST} in
	x86_64-w64-*)
		#econfp="--enable-sjlj-exceptions --without-dwarf2"
		# without options assumed SEH
		;;
	*)
		# for DWARF2 EH (broken in 5.1.0 on i686-w64-mingw32)
		#econfp="--disable-sjlj-exceptions --with-dwarf2"
		# for SJLJ EH
		econfp="--enable-sjlj-exceptions --without-dwarf2"
		;;
	esac
	case ${CHOST} in
	*-w64-mingw32)
		econfp="${econfp} --with-native-system-header-dir=${PREFIX}/${CHOST}/include"
		;;
	*-pc-mingw32)
		econfp="${econfp} --with-native-system-header-dir=${PREFIX}/include"
		;;
	esac

	econf --enable-shared \
		--disable-win32-registry --enable-version-specific-runtime-libs \
		--disable-debug --enable-checking=release \
		--enable-threads=win32 --enable-libgomp --enable-lto --enable-graphite \
		--with-gmp --with-mpc --with-cloog --with-libiconv \
		--with-system-zlib --disable-werror \
		--enable-languages=c,c++ \
		--enable-libstdcxx-time=yes \
		--enable-bootstrap --disable-nls --disable-multilib \
		${econfp}
}

src_compile()
{
	case ${CHOST} in
	*-w64-mingw32)
		emake BOOT_CFLAGS=\"-g -O2 -isystem ${PREFIX}/${CHOST}/include/ -I${PREFIX}/include/\" \
			BOOT_LDFLAGS=\"-B${PREFIX}/${CHOST}/lib/ -L${PREFIX}/lib/\"
		;;
	*)
		emake
		;;
	esac
}

src_install()
{
	emake_install
	cp -pv ${INSTDIR}${PREFIX}/bin/gcc.exe ${INSTDIR}${PREFIX}/bin/cc.exe
	case ${CHOST} in
	*-w64-mingw32)
		mv -fv ${INSTDIR}${PREFIX}/lib/gcc/${CHOST}/lib/libgcc_s.a \
				${INSTDIR}${PREFIX}/lib/gcc/${CHOST}/${PV}/
		rmdir ${INSTDIR}${PREFIX}/lib/gcc/${CHOST}/lib/
		;;
	esac
}


pkg_postinst()
{
	einfo "Fix specs file..."
	local targspecs=`dirname \`gcc --print-libgcc-file-name\``/specs
	
	local specs="${TMPDIR}/specs"
	local prefix_w=`posix_w32path "${PREFIX}"`

	echo "*mingw_prefix:" > ${specs}
	echo ${prefix_w} >> ${specs}
	echo "" >> ${specs}

	gcc -dumpspecs >> ${specs}

	sed ':a;N;$!ba;s/*cc1plus:\n\n/*cc1plus:\n\-isystem\ \%(mingw_prefix)\/include\n/' ${specs} > ${targspecs}
}

diff -urBb -x Makefile.in -x aclocal.m4 -x configure make-3.81/config/dospaths.m4 make-3.81-patched/config/dospaths.m4
--- make-3.81/config/dospaths.m4	2006-03-10 05:20:45 +0300
+++ make-3.81-patched/config/dospaths.m4	2008-03-26 15:45:33 +0300
@@ -22,7 +22,7 @@
     AC_CACHE_CHECK([whether system uses MSDOS-style paths], [ac_cv_dos_paths],
       [
         AC_COMPILE_IFELSE([
-#if !defined _WIN32 && !defined __WIN32__ && !defined __MSDOS__ && !defined __EMX__ && !defined __MSYS__
+#if !defined _WIN32 && !defined __WIN32__ && !defined __MSDOS__ && !defined __EMX__ && !defined __MSYS__ && !defined __CYGWIN__
 neither MSDOS nor Windows nor OS2
 #endif
 ],
diff -urBb -x Makefile.in -x aclocal.m4 -x configure make-3.81/config.h.W32 make-3.81-patched/config.h.W32
--- make-3.81/config.h.W32	2006-04-01 10:42:38 +0400
+++ make-3.81-patched/config.h.W32	2008-03-26 15:45:33 +0300
@@ -405,11 +405,16 @@
 /* Define to empty if `const' does not conform to ANSI C. */
 /* #undef const */
 
+#include <sys/types.h>
+
 /* Define to `int' if <sys/types.h> doesn't define. */
 #define gid_t int
 
 /* Define to `int' if <sys/types.h> does not define. */
+/* GCC 4.x reportedly defines pid_t.  */
+#ifndef _PID_T_
 #define pid_t int
+#endif
 
 /* Define to `int' if <sys/types.h> doesn't define. */
 #define uid_t int
diff -urBb -x Makefile.in -x aclocal.m4 -x configure make-3.81/config.h.in make-3.81-patched/config.h.in
--- make-3.81/config.h.in	2006-04-01 10:40:00 +0400
+++ make-3.81-patched/config.h.in	2008-03-26 15:54:33 +0300
@@ -338,6 +338,9 @@
 /* Define to the version of this package. */
 #undef PACKAGE_VERSION
 
+/* Define to the character that separates directories in PATH. */
+#undef PATH_SEPARATOR_CHAR
+
 /* Define to 1 if the C compiler supports function prototypes. */
 #undef PROTOTYPES
 
@@ -357,7 +360,7 @@
 
 /* If using the C implementation of alloca, define if you know the
    direction of stack growth for your system; otherwise it will be
-   automatically deduced at run-time.
+   automatically deduced at runtime.
 	STACK_DIRECTION > 0 => grows toward higher addresses
 	STACK_DIRECTION < 0 => grows toward lower addresses
 	STACK_DIRECTION = 0 => direction of growth unknown */
diff -urBb -x Makefile.in -x aclocal.m4 -x configure make-3.81/configure.in make-3.81-patched/configure.in
--- make-3.81/configure.in	2006-04-01 10:36:40 +0400
+++ make-3.81-patched/configure.in	2008-03-26 15:45:33 +0300
@@ -384,6 +384,8 @@
     ;;
 esac
 
+AC_DEFINE_UNQUOTED(PATH_SEPARATOR_CHAR,'$PATH_SEPARATOR',[Define to the character that separates directories in PATH.])
+
 # Include the Maintainer's Makefile section, if it's here.
 
 MAINT_MAKEFILE=/dev/null
diff -urBb -x Makefile.in -x aclocal.m4 -x configure make-3.81/function.c make-3.81-patched/function.c
--- make-3.81/function.c	2006-04-01 10:36:40 +0400
+++ make-3.81-patched/function.c	2009-09-12 02:20:34 +0400
@@ -1475,6 +1475,9 @@
 
   /* make sure that CreateProcess() has Path it needs */
   sync_Path_environment();
+  /* `sync_Path_environment' may realloc `environ', so take note of
+     the new value.  */
+  envp = environ;
 
   if (!process_begin(hProcess, command_argv, envp, command_argv[0], NULL)) {
     /* register process for wait */
@@ -1589,12 +1592,25 @@
   int pid;
 
 #ifndef __MSDOS__
+#ifdef WINDOWS32
+  /* Reset just_print_flag.  This is needed on Windows when batch files
+     are used to run the commands, because we normally refrain from
+     creating batch files under -n.  */
+  int j_p_f = just_print_flag;
+
+  just_print_flag = 0;
+#endif
   /* Construct the argument list.  */
   command_argv = construct_command_argv (argv[0],
 					 (char **) NULL, (struct file *) 0,
-                                         &batch_filename);
+                                         0, &batch_filename);
   if (command_argv == 0)
+    {
+#ifdef WINDOWS32
+      just_print_flag = j_p_f;
+#endif
     return o;
+    }
 #endif
 
   /* Using a target environment for `shell' loses in cases like:
@@ -1622,6 +1638,8 @@
 #ifdef WINDOWS32
 
   windows32_openpipe (pipedes, &pid, command_argv, envp);
+  /* Restore the value of just_print_flag.  */
+  just_print_flag = j_p_f;
 
   if (pipedes[0] < 0) {
 	/* open of the pipe failed, mark as failed execution */
@@ -1685,6 +1703,7 @@
       free ((char *) command_argv);
 
       /* Close the write side of the pipe.  */
+      if (pipedes[1] >= 0)
       (void) close (pipedes[1]);
 #endif
 
@@ -1784,7 +1803,7 @@
 
   /* Construct the argument list.  */
   command_argv = construct_command_argv (argv[0], (char **) NULL,
-                                         (struct file *) 0, &batch_filename);
+                                         (struct file *) 0, 0, &batch_filename);
   if (command_argv == 0)
     return o;
 
@@ -1875,6 +1894,14 @@
 #endif
 
 
+#ifdef HAVE_DOS_PATHS
+#define IS_ABSOLUTE(n) (n[0] && n[1] == ':')
+#define ROOT_LEN 3
+#else
+#define IS_ABSOLUTE(n) (n[0] == '/')
+#define ROOT_LEN 1
+#endif
+
 /* Return the absolute name of file NAME which does not contain any `.',
    `..' components nor any repeated path separators ('/').   */
 
@@ -1883,13 +1910,14 @@
 {
   char *dest;
   const char *start, *end, *apath_limit;
+  unsigned long root_len = ROOT_LEN;
 
   if (name[0] == '\0' || apath == NULL)
     return NULL;
 
   apath_limit = apath + GET_PATH_MAX;
 
-  if (name[0] != '/')
+  if (!IS_ABSOLUTE(name))
     {
       /* It is unlikely we would make it until here but just to make sure. */
       if (!starting_directory)
@@ -1897,12 +1925,40 @@
 
       strcpy (apath, starting_directory);
 
+#ifdef HAVE_DOS_PATHS
+      if (IS_PATHSEP(name[0]))
+	{
+	  /* We have /foo, an absolute file name except for the drive
+	     letter.  Assume the missing drive letter is the current
+	     drive, which we can get if we remove from starting_directory
+	     everything past the root directory.  */
+	  apath[root_len] = '\0';
+	}
+#endif
+
       dest = strchr (apath, '\0');
     }
   else
     {
-      apath[0] = '/';
-      dest = apath + 1;
+      strncpy (apath, name, root_len);
+      apath[root_len] = '\0';
+      dest = apath + root_len;
+      /* Get past the root, since we already copied it.  */
+      name += root_len;
+#ifdef HAVE_DOS_PATHS
+      if (!IS_PATHSEP(apath[2]))
+	{
+	  /* Convert d:foo into d:./foo and increase root_len.  */
+	  apath[2] = '.';
+	  apath[3] = '/';
+	  dest++;
+	  root_len++;
+	  /* strncpy above copied one character too many.  */
+	  name--;
+	}
+      else
+	apath[2] = '/';	/* make sure it's a forward slash */
+#endif
     }
 
   for (start = end = name; *start != '\0'; start = end)
@@ -1910,11 +1966,11 @@
       unsigned long len;
 
       /* Skip sequence of multiple path-separators.  */
-      while (*start == '/')
+      while (IS_PATHSEP(*start))
 	++start;
 
       /* Find end of path component.  */
-      for (end = start; *end != '\0' && *end != '/'; ++end)
+      for (end = start; *end != '\0' && !IS_PATHSEP(*end); ++end)
         ;
 
       len = end - start;
@@ -1926,12 +1982,12 @@
       else if (len == 2 && start[0] == '.' && start[1] == '.')
 	{
 	  /* Back up to previous component, ignore if at root already.  */
-	  if (dest > apath + 1)
-	    while ((--dest)[-1] != '/');
+	  if (dest > apath + root_len)
+	    for (--dest; !IS_PATHSEP(dest[-1]); --dest);
 	}
       else
 	{
-	  if (dest[-1] != '/')
+	  if (!IS_PATHSEP(dest[-1]))
             *dest++ = '/';
 
 	  if (dest + len >= apath_limit)
@@ -1944,7 +2000,7 @@
     }
 
   /* Unless it is root strip trailing separator.  */
-  if (dest > apath + 1 && dest[-1] == '/')
+  if (dest > apath + root_len && IS_PATHSEP(dest[-1]))
     --dest;
 
   *dest = '\0';
diff -urBb -x Makefile.in -x aclocal.m4 -x configure make-3.81/job.c make-3.81-patched/job.c
--- make-3.81/job.c	2006-03-20 06:03:04 +0300
+++ make-3.81-patched/job.c	2008-03-26 15:45:33 +0300
@@ -1018,7 +1018,9 @@
 #ifdef VMS
     argv = p;
 #else
-    argv = construct_command_argv (p, &end, child->file, &child->sh_batch_file);
+    argv = construct_command_argv (p, &end, child->file,
+				   child->file->cmds->lines_flags[child->command_line - 1],
+				   &child->sh_batch_file);
 #endif
     if (end == NULL)
       child->command_ptr = NULL;
@@ -2193,11 +2195,17 @@
    If *RESTP is NULL, newlines will be ignored.
 
    SHELL is the shell to use, or nil to use the default shell.
-   IFS is the value of $IFS, or nil (meaning the default).  */
+   IFS is the value of $IFS, or nil (meaning the default).
+
+   FLAGS is the value of lines_flags for this command line.  It is
+   used in the WINDOWS32 port to check whether + or $(MAKE) were found
+   in this command line, in which case the effect of just_print_flag
+   is overridden.  */
 
 static char **
 construct_command_argv_internal (char *line, char **restp, char *shell,
-                                 char *ifs, char **batch_filename_ptr)
+                                 char *ifs, int flags,
+				 char **batch_filename_ptr)
 {
 #ifdef __MSDOS__
   /* MSDOS supports both the stock DOS shell and ports of Unixy shells.
@@ -2307,6 +2315,12 @@
                              "login", "logout", "read", "readonly", "set",
                              "shift", "switch", "test", "times", "trap",
                              "umask", "wait", "while", 0 };
+# ifdef HAVE_DOS_PATHS
+  /* This is required if the MSYS/Cygwin ports (which do not define
+     WINDOWS32) are compiled with HAVE_DOS_PATHS defined, which uses
+     sh_chars_sh[] directly (see below).  */
+  static char *sh_chars_sh = sh_chars;
+# endif	 /* HAVE_DOS_PATHS */
 #endif
   register int i;
   register char *p;
@@ -2770,7 +2784,7 @@
     /* Some shells do not work well when invoked as 'sh -c xxx' to run a
        command line (e.g. Cygnus GNUWIN32 sh.exe on WIN32 systems).  In these
        cases, run commands via a script file.  */
-    if (just_print_flag) {
+    if (just_print_flag && !(flags & COMMANDS_RECURSE)) {
       /* Need to allocate new_argv, although it's unused, because
         start_job_command will want to free it and its 0'th element.  */
       new_argv = (char **) xmalloc(2 * sizeof (char *));
@@ -2814,7 +2828,7 @@
     if (unixy_shell)
       new_argv = construct_command_argv_internal (new_line, (char **) NULL,
                                                   (char *) 0, (char *) 0,
-                                                  (char **) 0);
+                                                  flags, (char **) 0);
 #ifdef __EMX__
     else if (!unixy_shell)
       {
@@ -2924,7 +2938,7 @@
 
 char **
 construct_command_argv (char *line, char **restp, struct file *file,
-                        char **batch_filename_ptr)
+                        int cmd_flags, char **batch_filename_ptr)
 {
   char *shell, *ifs;
   char **argv;
@@ -3036,7 +3050,8 @@
     warn_undefined_variables_flag = save;
   }
 
-  argv = construct_command_argv_internal (line, restp, shell, ifs, batch_filename_ptr);
+  argv = construct_command_argv_internal (line, restp, shell, ifs,
+					  cmd_flags, batch_filename_ptr);
 
   free (shell);
   free (ifs);
diff -urBb -x Makefile.in -x aclocal.m4 -x configure make-3.81/job.h make-3.81-patched/job.h
--- make-3.81/job.h	2006-02-12 01:16:04 +0300
+++ make-3.81-patched/job.h	2008-03-26 15:45:33 +0300
@@ -70,7 +70,7 @@
 extern void reap_children PARAMS ((int block, int err));
 extern void start_waiting_jobs PARAMS ((void));
 
-extern char **construct_command_argv PARAMS ((char *line, char **restp, struct file *file, char** batch_file));
+extern char **construct_command_argv PARAMS ((char *line, char **restp, struct file *file, int cmd_flags, char** batch_file));
 #ifdef VMS
 extern int child_execute_job PARAMS ((char *argv, struct child *child));
 #elif defined(__EMX__)
diff -urBb -x Makefile.in -x aclocal.m4 -x configure make-3.81/main.c make-3.81-patched/main.c
--- make-3.81/main.c	2006-03-20 05:36:37 +0300
+++ make-3.81-patched/main.c	2008-03-26 15:45:33 +0300
@@ -1296,7 +1296,12 @@
     argv[0] = concat (current_directory, "/", argv[0]);
 #else  /* !__MSDOS__ */
   if (current_directory[0] != '\0'
-      && argv[0] != 0 && argv[0][0] != '/' && strchr (argv[0], '/') != 0)
+      && argv[0] != 0 && argv[0][0] != '/' && strchr (argv[0], '/') != 0
+#ifdef HAVE_DOS_PATHS
+      && (argv[0][0] != '\\' && (!argv[0][0] || argv[0][1] != ':'))
+      && strchr (argv[0], '\\') != 0
+#endif
+      )
     argv[0] = concat (current_directory, "/", argv[0]);
 #endif /* !__MSDOS__ */
 #endif /* WINDOWS32 */
diff -urBb -x Makefile.in -x aclocal.m4 -x configure make-3.81/make.h make-3.81-patched/make.h
--- make-3.81/make.h	2006-02-16 02:54:43 +0300
+++ make-3.81-patched/make.h	2008-03-26 15:45:33 +0300
@@ -347,12 +347,14 @@
 #define S_(msg1,msg2,num)   ngettext (msg1,msg2,num)
 
 /* Handle other OSs.  */
-#if defined(HAVE_DOS_PATHS)
+#ifndef PATH_SEPARATOR_CHAR
+# if defined(HAVE_DOS_PATHS)
 # define PATH_SEPARATOR_CHAR ';'
-#elif defined(VMS)
+# elif defined(VMS)
 # define PATH_SEPARATOR_CHAR ','
-#else
+# else
 # define PATH_SEPARATOR_CHAR ':'
+# endif
 #endif
 
 /* This is needed for getcwd() and chdir().  */
Only in make-3.81-patched/po: Makevars.template
diff -urBb -x Makefile.in -x aclocal.m4 -x configure make-3.81/variable.c make-3.81-patched/variable.c
--- make-3.81/variable.c	2006-03-08 23:15:08 +0300
+++ make-3.81-patched/variable.c	2008-03-26 15:45:33 +0300
@@ -916,15 +916,18 @@
 		break;
 
 	      case v_noexport:
-                /* If this is the SHELL variable and it's not exported, then
-                   add the value from our original environment.  */
-                if (streq (v->name, "SHELL"))
                   {
+		  /* If this is the SHELL variable and it's not exported,
+		     then add the value from our original environment, if
+		     the original environment defined a value for SHELL.  */
                     extern struct variable shell_var;
+		  if (streq (v->name, "SHELL") && shell_var.value)
+		    {
                     v = &shell_var;
                     break;
                   }
                 continue;
+		}
 
 	      case v_ifset:
 		if (v->origin == o_default)
@@ -1188,8 +1191,25 @@
           no_default_sh_exe = 0;
         }
       else
+        {
+          if (alloc_value)
+            free (alloc_value);
+
+          alloc_value = allocated_variable_expand (p);
+          if (find_and_set_default_shell (alloc_value))
+            {
+              v = define_variable_in_set (varname, strlen (varname), p,
+                                          origin, flavor == f_recursive,
+                                          (target_var
+                                           ? current_variable_set_list->set
+                                           : NULL),
+                                          flocp);
+              no_default_sh_exe = 0;
+            }
+          else
         v = lookup_variable (varname, strlen (varname));
     }
+    }
   else
 #endif
 
diff -urBb -x Makefile.in -x aclocal.m4 -x configure make-3.81/vpath.c make-3.81-patched/vpath.c
--- make-3.81/vpath.c	2006-02-12 01:16:05 +0300
+++ make-3.81-patched/vpath.c	2008-03-26 15:45:33 +0300
@@ -239,14 +239,24 @@
 
       /* Find the end of this entry.  */
       v = p;
-      while (*p != '\0' && *p != PATH_SEPARATOR_CHAR
+      while (*p != '\0'
+#if defined(HAVE_DOS_PATHS) && (PATH_SEPARATOR_CHAR == ':')
+	     /* Platforms whose PATH_SEPARATOR_CHAR is ':' and which
+		also define HAVE_DOS_PATHS would like us to recognize
+		colons after the drive letter in the likes of
+		"D:/foo/bar:C:/xyzzy".  */
+	     && (*p != PATH_SEPARATOR_CHAR
+		 || (p == v + 1 && (p[1] == '/' || p[1] == '\\')))
+#else
+	     && *p != PATH_SEPARATOR_CHAR
+#endif
 	     && !isblank ((unsigned char)*p))
 	++p;
 
       len = p - v;
       /* Make sure there's no trailing slash,
 	 but still allow "/" as a directory.  */
-#if defined(__MSDOS__) || defined(__EMX__)
+#if defined(__MSDOS__) || defined(__EMX__) || defined(HAVE_DOS_PATHS)
       /* We need also to leave alone a trailing slash in "d:/".  */
       if (len > 3 || (len > 1 && v[1] != ':'))
 #endif
diff -urBb -x Makefile.in -x aclocal.m4 -x configure make-3.81/w32/pathstuff.c make-3.81-patched/w32/pathstuff.c
--- make-3.81/w32/pathstuff.c	2006-02-12 01:16:05 +0300
+++ make-3.81-patched/w32/pathstuff.c	2009-09-10 04:43:56 +0400
@@ -49,6 +49,9 @@
     char *p;            /* points to element of old Path */
 
     /* is this a multi-element Path ? */
+    /* FIXME: Perhaps use ":;\"" in strpbrk to convert all quotes to
+       delimiters as well, as a way to handle quoted directories in
+       PATH?  */
     for (p = Path, etok = strpbrk(p, ":;");
          etok;
          etok = strpbrk(p, ":;"))
@@ -70,6 +73,15 @@
             } else
                 /* all finished, force abort */
                 p += strlen(p);
+        } else if (*p == '"') { /* a quoted directory */
+                for (p++; *p && *p != '"'; p++) /* skip quoted part */
+                    ;
+                etok = strpbrk(p, ":;");        /* find next delimiter */
+                if (etok) {
+                    *etok = to_delim;
+                    p = ++etok;
+                } else
+                    p += strlen(p);
         } else {
             /* found another one, no drive letter */
             *etok = to_delim;
diff -urBb -x Makefile.in -x aclocal.m4 -x configure make-3.81/w32/subproc/sub_proc.c make-3.81-patched/w32/subproc/sub_proc.c
--- make-3.81/w32/subproc/sub_proc.c	2006-03-10 05:20:46 +0300
+++ make-3.81-patched/w32/subproc/sub_proc.c	2009-09-15 06:32:15 +0400
@@ -1,6 +1,6 @@
 /* Process handling for Windows.
 Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
-2006 Free Software Foundation, Inc.
+              2006, 2009 Free Software Foundation, Inc.
 This file is part of GNU Make.
 
 GNU Make is free software; you can redistribute it and/or modify it under the
@@ -28,6 +28,7 @@
 #include "debug.h"
 
 static char *make_command_line(char *shell_name, char *exec_path, char **argv);
+extern char *xmalloc (unsigned int);
 
 typedef struct sub_process_t {
 	int sv_stdin[2];
@@ -347,53 +348,54 @@
 
 
 static HANDLE
-find_file(char *exec_path, LPOFSTRUCT file_info)
+find_file(const char *exec_path, const char *path_var,
+         char *full_fname, DWORD full_len)
 {
 	HANDLE exec_handle;
 	char *fname;
 	char *ext;
+       DWORD req_len;
+       int i;
+       static const char *extensions[] =
+         /* Should .com come before no-extension case?  */
+         { ".exe", ".cmd", ".bat", "", ".com", NULL };
 
-	fname = malloc(strlen(exec_path) + 5);
+       fname = xmalloc(strlen(exec_path) + 5);
 	strcpy(fname, exec_path);
 	ext = fname + strlen(fname);
 
-	strcpy(ext, ".exe");
-	if ((exec_handle = (HANDLE)OpenFile(fname, file_info,
-			OF_READ | OF_SHARE_COMPAT)) != (HANDLE)HFILE_ERROR) {
+       for (i = 0; extensions[i]; i++) {
+               strcpy(ext, extensions[i]);
+               if (((req_len = SearchPath (path_var, fname, NULL, full_len,
+                                           full_fname, NULL)) > 0
+                    /* For compatibility with previous code, which
+                       used OpenFile, and with Windows operation in
+                       general, also look in various default
+                       locations, such as Windows directory and
+                       Windows System directory.  Warning: this also
+                       searches PATH in the Make's environment, which
+                       might not be what the Makefile wants, but it
+                       seems to be OK as a fallback, after the
+                       previous SearchPath failed to find on child's
+                       PATH.  */
+                    || (req_len = SearchPath (NULL, fname, NULL, full_len,
+                                              full_fname, NULL)) > 0)
+                   && req_len <= full_len
+                   && (exec_handle =
+                               CreateFile(full_fname,
+                                          GENERIC_READ,
+                                          FILE_SHARE_READ | FILE_SHARE_WRITE,
+                                          NULL,
+                                          OPEN_EXISTING,
+                                          FILE_ATTRIBUTE_NORMAL,
+                                          NULL)) != INVALID_HANDLE_VALUE) {
 		free(fname);
 		return(exec_handle);
 	}
-
-	strcpy(ext, ".cmd");
-	if ((exec_handle = (HANDLE)OpenFile(fname, file_info,
-			OF_READ | OF_SHARE_COMPAT)) != (HANDLE)HFILE_ERROR) {
-		free(fname);
-		return(exec_handle);
 	}
 
-	strcpy(ext, ".bat");
-	if ((exec_handle = (HANDLE)OpenFile(fname, file_info,
-			OF_READ | OF_SHARE_COMPAT)) != (HANDLE)HFILE_ERROR) {
 		free(fname);
-		return(exec_handle);
-	}
-
-	/* should .com come before this case? */
-	if ((exec_handle = (HANDLE)OpenFile(exec_path, file_info,
-			OF_READ | OF_SHARE_COMPAT)) != (HANDLE)HFILE_ERROR) {
-		free(fname);
-		return(exec_handle);
-	}
-
-	strcpy(ext, ".com");
-	if ((exec_handle = (HANDLE)OpenFile(fname, file_info,
-			OF_READ | OF_SHARE_COMPAT)) != (HANDLE)HFILE_ERROR) {
-		free(fname);
-		return(exec_handle);
-	}
-
-	free(fname);
-	return(exec_handle);
+       return INVALID_HANDLE_VALUE;
 }
 
 
@@ -416,6 +418,9 @@
 	char *shell_name = 0;
 	int file_not_found=0;
 	HANDLE exec_handle;
+       char exec_fname[MAX_PATH];
+       const char *path_var = NULL;
+       char **ep;
 	char buf[256];
 	DWORD bytes_returned;
 	DWORD flags;
@@ -423,8 +428,6 @@
 	STARTUPINFO startInfo;
 	PROCESS_INFORMATION procInfo;
 	char *envblk=NULL;
-	OFSTRUCT file_info;
-
 
 	/*
 	 *  Shell script detection...  if the exec_path starts with #! then
@@ -433,16 +436,27 @@
 	 *  hard-code the path to the shell or perl or whatever:  Instead, we
 	 *  assume it's in the path somewhere (generally, the NT tools
 	 *  bin directory)
-	 *  We use OpenFile here because it is capable of searching the Path.
 	 */
 
-	exec_handle = find_file(exec_path, &file_info);
+       /* Use the Makefile's value of PATH to look for the program to
+          execute, because it could be different from Make's PATH
+          (e.g., if the target sets its own value.  */
+       if (envp)
+               for (ep = envp; *ep; ep++) {
+                       if (strncmp (*ep, "PATH=", 5) == 0
+                           || strncmp (*ep, "Path=", 5) == 0) {
+                               path_var = *ep + 5;
+                               break;
+                       }
+               }
+       exec_handle = find_file(exec_path, path_var,
+                               exec_fname, sizeof(exec_fname));
 
 	/*
-	 * If we couldn't open the file, just assume that Windows32 will be able
-	 * to find and execute it.
+        * If we couldn't open the file, just assume that Windows will be
+        * somehow able to find and execute it.
 	 */
-	if (exec_handle == (HANDLE)HFILE_ERROR) {
+       if (exec_handle == INVALID_HANDLE_VALUE) {
 		file_not_found++;
 	}
 	else {
@@ -496,8 +510,7 @@
 	if (file_not_found)
 		command_line = make_command_line( shell_name, exec_path, argv);
 	else
-		command_line = make_command_line( shell_name, file_info.szPathName,
-				 argv);
+               command_line = make_command_line( shell_name, exec_fname, argv);
 
 	if ( command_line == NULL ) {
 		pproc->last_err = 0;
@@ -517,7 +530,7 @@
 	if ((shell_name) || (file_not_found)) {
 		exec_path = 0;	/* Search for the program in %Path% */
 	} else {
-		exec_path = file_info.szPathName;
+               exec_path = exec_fname;
 	}
 
 	/*

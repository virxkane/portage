# Copyright 2013-2015 Chernov A.A.
# This is a part of mingw-portage project: 
# http://sourceforge.net/projects/mingwportage/
# Distributed under the terms of the GNU General Public License v2

DESCRIPTION="Qt toolkit"

HOMEPAGE="http://qt-project.org/ http://qt.digia.com/"

LICENSE="LGPL-2.1 GPL-3"

DEPEND="dev-util/qt4-pathfix"
RDEPEND="sys-libs/zlib
		media-libs/libpng
		meta-virtual/jpeg
		media-libs/libmng
		media-libs/tiff
		dev-db/postgresql-libpq
		dev-db/mysql-connector-c"

#MY_PV=${PV/_/-}
MY_P=qt-everywhere-opensource-src-${PV}

SRC_URI="http://download.qt-project.org/official_releases/qt/4.8/${PV}/${MY_P}.tar.gz"

SOURCES_DIR="${MY_P}"

src_unpack()
{
	# exclude webkit
	local exclude_parts="src/3rdparty/webkit"
	# exclude other 3rdparty sources
	exclude_parts+=" src/3rdparty/zlib src/3rdparty/libjpeg src/3rdparty/libmng src/3rdparty/libpng src/3rdparty/libtiff"
	# other unused directories
	exclude_parts+=" examples demos"

	local part=
	local exclude_opts=
	local tarball="${MY_P}.tar.gz"
	for part in ${exclude_parts}
	do
		exclude_opts+="--exclude=${SOURCES_DIR}/${part} "
	done
	local f=
	for f in $A
	do
		if [ "$f" = "${tarball}" ]
		then
			ebegin "Unpacking parts of ${tarball}... "
			local f=`find_srcpackage ${tarball}`
			tar -xzf ${f} ${exclude_opts} > /dev/null 2>&1
			if [ $? -eq 0 ]
			then
				eend "OK"
			else
				eend "failed"
				eerror "failed to unpack"
			fi
			# if tar remove 'configure.exe'
			if [ ! -f "${SOURCES_DIR}/configure.exe" ]
			then
				tar -xzf ${f} "${SOURCES_DIR}/configure.exe" > /dev/null 2>&1
			fi
		else
			unpack $f
		fi
	done
	cd "${SOURCES_DIR}" || eerror "failed to cd to source dir :("
}

src_prepare()
{
	epatch "${PN}-4.8.6-mingwrt-4.0.patch"
}

src_configure()
{
	local _prefix="${INSTDIR}${PREFIX}"
	install -d "${_prefix}"
	./configure.exe -prefix ${_prefix} -bindir "${_prefix}/bin" -libdir "${_prefix}/lib/qt4" \
		-docdir "${_prefix}/share/doc/qt-${PV}" -headerdir "${_prefix}/include/qt4" \
		-plugindir "${_prefix}/lib/qt4/plugins" -importdir "${_prefix}/lib/qt4/imports" \
		-datadir "${_prefix}/share/qt4" -translationdir "${_prefix}/share/qt4/translations" \
		-examplesdir "${_prefix}/share/qt4/examples" -demosdir "${_prefix}/share/qt4/demos" \
		-release -opensource -confirm-license -shared -ltcg -exceptions -rtti -accessibility -stl \
		-plugin-sql-sqlite -plugin-sql-odbc -plugin-sql-psql -plugin-sql-mysql \
		-qt-style-windows -qt-style-windowsxp -qt-style-windowsvista \
		-system-libpng -system-libjpeg -system-libmng -system-libtiff -system-zlib \
		-graphicssystem raster \
		-openssl -no-dbus -no-phonon -multimedia -no-webkit -audio-backend -script -scripttools -declarative \
		-no-dsp -no-vcproj -nomake examples -nomake demos \
		-platform win32-g++-4.6
	if [ $? -eq 0 ]
	then
		einfo "configure successfull"
	else
		eerror "configure failed"
	fi
}

src_install()
{
	make install
	if [ $? -eq 0 ]
	then
		eend "make install successfull."
	else
		eerror "make install failed!"
	fi

	# TODO: copy private headers

	local _prefix="${INSTDIR}${PREFIX}"
	local prefix_w=`posix_w32path "${PREFIX}"`

	#mv -fv "${_prefix}/lib/qt4/"*.dll "${_prefix}/bin/"
	rm -f "${_prefix}/lib/qt4/"*.dll

	local patch_files="qmake.exe QtCore4.dll"
	local _file=
	for _file in ${patch_files}
	do
		qt4-pathfix --prefix="${prefix_w}" \
				--bindir="${prefix_w}/bin" \
				--libdir="${prefix_w}/lib/qt4" \
				--docdir="${prefix_w}/share/doc/qt-${PV}" \
				--headerdir="${prefix_w}/include/qt4" \
				--plugindir="${prefix_w}/lib/qt4/plugins" \
				--importdir="${prefix_w}/lib/qt4/imports" \
				--datadir="${prefix_w}/share/qt4" \
				--translationdir="${prefix_w}/share/qt4/translations" \
				--examplesdir="${prefix_w}/share/qt4/examples" \
				--demosdir="${prefix_w}/share/qt4/demos" \
				"${_prefix}/bin/${_file}"
	done
	qt4-pathfix --prefix="${prefix_w}" \
				--datadir="${prefix_w}/share/qt4" \
				"${_prefix}/share/qt4/mkspecs/default/qmake.conf"
}
